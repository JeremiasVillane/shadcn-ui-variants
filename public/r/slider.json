{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "slider",
  "type": "registry:ui",
  "title": "Slider",
  "description": "A versatile slider component with a variety of styles and advanced behaviours.",
  "dependencies": [
    "@radix-ui/react-slider"
  ],
  "files": [
    {
      "path": "components/ui/slider.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\nimport { cva } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\ninterface SliderProps\n  extends React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root> {\n  /** @default \"default\" */\n  variant?: \"default\" | \"solid\" | \"square\" | \"thin\"\n  /**\n   * If true, shows a tooltip with the value on the thumb while dragging.\n   * @default false\n   */\n  showTooltip?: boolean\n  /**\n   * If true, renders an <output> element showing the current value above the slider.\n   * @default false\n   */\n  withOutput?: boolean\n  /**\n   * If true, renders a numeric input field(s) next to the slider.\n   * @default false\n   */\n  withInput?: boolean\n  /**\n   * Content to display as label at the start of the slider track.\n   */\n  startLabel?: React.ReactNode\n  /**\n   * Content to display as label at the end of the slider track.\n   */\n  endLabel?: React.ReactNode\n  /**\n   * If true, shows tooltip ticks below the slider.\n   * @default false\n   */\n  showTicks?: boolean\n  /**\n   * Desired number of ticks to display, including start and end.\n   * They will be evenly distributed between min and max.\n   * Minimum 2, Maximum 101.\n   * @default 11\n   */\n  numberOfTicks?: number\n}\n\nconst sliderRootVariants = cva(\n  \"relative flex w-full touch-none select-none items-center py-3\",\n  {\n    variants: {\n      variant: {\n        default: \"\",\n        solid:\n          \"[&>:last-child>span]:bg-primary [&>:first-child>span]:opacity-70\",\n        square: \"[&>:last-child>span]:rounded\",\n        thin: \"[&>:last-child>span]:border-background [&>:last-child>span]:bg-primary **:data-[slot=slider-thumb]:shadow-none [&>:last-child>span]:h-6 [&>:last-child>span]:w-2.5 [&>:last-child>span]:border-[3px] [&>:last-child>span]:ring-offset-0\"\n      }\n    },\n    defaultVariants: {\n      variant: \"default\"\n    }\n  }\n)\n\n/** A versatile slider component with a variety of styles and advanced behaviours. */\nexport const Slider = React.forwardRef<\n  React.ComponentRef<typeof SliderPrimitive.Root>,\n  SliderProps\n>(\n  (\n    {\n      className,\n      variant = \"default\",\n      value,\n      onValueChange,\n      defaultValue,\n      withOutput = false,\n      withInput = false,\n      startLabel,\n      endLabel,\n      showTooltip = false,\n      showTicks = false,\n      numberOfTicks: numberOfTicksProp,\n      min = 0,\n      max = 100,\n      step = 1,\n      ...restSliderProps\n    },\n    ref\n  ) => {\n    const numberOfTicks = Math.max(2, Math.min(numberOfTicksProp ?? 11, 101))\n\n    // ****** STATE ****** //\n    const initialValue = defaultValue ?? [(min + max) / 2]\n    const [uncontrolledValue, setUncontrolledValue] =\n      React.useState(initialValue)\n    const isControlled = value !== undefined\n    const sliderValue = isControlled ? value! : uncontrolledValue\n    const [inputStringValues, setInputStringValues] = React.useState<string[]>(\n      () =>\n        (Array.isArray(sliderValue)\n          ? sliderValue\n          : [sliderValue ?? initialValue[0]]\n        ).map(String)\n    )\n    const [activeThumbIndex, setActiveThumbIndex] = React.useState<\n      number | null\n    >(null)\n    const [tooltipStyle, setTooltipStyle] = React.useState<React.CSSProperties>(\n      {\n        opacity: 0,\n        visibility: \"hidden\",\n        position: \"absolute\",\n        pointerEvents: \"none\",\n        zIndex: 10,\n        transform: \"translateX(-50%)\",\n        transition: \"opacity 0.1s ease-out, visibility 0s linear 0.1s\"\n      }\n    )\n\n    // ****** REFS ****** //\n    const sliderAndTicksContainerRef = React.useRef<HTMLDivElement>(null)\n    const thumbRefs = React.useRef<(HTMLSpanElement | null)[]>([])\n\n    const displayValue = React.useMemo(() => {\n      return Array.isArray(sliderValue)\n        ? sliderValue\n        : [sliderValue ?? initialValue[0]]\n    }, [sliderValue, initialValue])\n\n    const tickValues = React.useMemo(() => {\n      const values = []\n      if (numberOfTicks < 2 || min >= max) {\n        values.push(min)\n        if (min < max) values.push(max)\n        return values\n      }\n      const range = max - min\n      const increment = range / (numberOfTicks - 1)\n      for (let i = 0; i < numberOfTicks; i++) {\n        let tickValue = min + i * increment\n        if (i === 0) tickValue = min\n        if (i === numberOfTicks - 1) tickValue = max\n        let precision = 0\n        if (Math.abs(increment) > 1e-9 && Math.abs(increment) < 1) precision = 2\n        if (Math.abs(tickValue) < 1e-9) tickValue = 0 // Evitar -0\n        values.push(parseFloat(tickValue.toFixed(precision)))\n      }\n      return values\n    }, [min, max, numberOfTicks])\n\n    // ****** EFFECTS ****** //\n    // Synchronize Slider -> Input Strings\n    React.useEffect(() => {\n      const currentInternalValue = displayValue\n      const currentSliderStrings = currentInternalValue.map(String)\n      if (\n        JSON.stringify(currentSliderStrings) !==\n        JSON.stringify(inputStringValues)\n      ) {\n        setInputStringValues(currentSliderStrings)\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [displayValue])\n\n    // Listener Global PointerUp to hide tooltip\n    React.useEffect(() => {\n      const handleGlobalPointerUp = () => {\n        if (activeThumbIndex !== null) {\n          setActiveThumbIndex(null)\n        }\n      }\n      // To ensure it runs before other events\n      window.addEventListener(\"pointerup\", handleGlobalPointerUp, true)\n      window.addEventListener(\"pointercancel\", handleGlobalPointerUp, true)\n      return () => {\n        window.removeEventListener(\"pointerup\", handleGlobalPointerUp, true)\n        window.removeEventListener(\"pointercancel\", handleGlobalPointerUp, true)\n      }\n    }, [activeThumbIndex])\n\n    // Calculate Tooltip Position\n    React.useEffect(() => {\n      if (\n        showTooltip &&\n        activeThumbIndex !== null &&\n        sliderAndTicksContainerRef.current &&\n        thumbRefs.current[activeThumbIndex]\n      ) {\n        const containerNode = sliderAndTicksContainerRef.current\n        const thumbNode = thumbRefs.current[activeThumbIndex]\n        if (thumbNode) {\n          const containerRect = containerNode.getBoundingClientRect()\n          const thumbRect = thumbNode.getBoundingClientRect()\n          const newLeft =\n            thumbRect.left - containerRect.left + thumbRect.width / 2\n          const newBottom =\n            containerRect.height - (thumbRect.top - containerRect.top) + 8 // 8px offset above thumb\n          setTooltipStyle((prev) => ({\n            ...prev,\n            left: `${newLeft}px`,\n            bottom: `${newBottom}px`,\n            opacity: 1,\n            visibility: \"visible\",\n            transition: \"opacity 0.1s ease-out, visibility 0s linear 0s\" // Show instantly\n          }))\n        }\n      } else {\n        // Hide\n        setTooltipStyle((prev) => ({\n          ...prev,\n          opacity: 0,\n          visibility: \"hidden\",\n          transition: \"opacity 0.1s ease-out, visibility 0s linear 0.1s\" // Hide with visibility delay\n        }))\n      }\n    }, [activeThumbIndex, displayValue, showTooltip]) // Recalculate if active thumb or value changes\n\n    // ****** HANDLERS ****** //\n    const findClosestValue = React.useCallback(\n      (target: number, allowedValues: number[]): number => {\n        if (!allowedValues || allowedValues.length === 0) return target\n        // Find value in allowedValues with smallest absolute difference to target\n        return allowedValues.reduce((prev, curr) =>\n          Math.abs(curr - target) < Math.abs(prev - target) ? curr : prev\n        )\n      },\n      []\n    )\n\n    // Handler called by Radix OR by Input validation\n    const handleSliderChange = React.useCallback(\n      (newValue: number[]) => {\n        let finalValue = newValue\n\n        // *** SNAP TO TICK: If ticks are visible, set each value to nearest tick ***\n        if (showTicks && tickValues.length > 0) {\n          finalValue = newValue.map((val) => findClosestValue(val, tickValues))\n        }\n\n        // Check if value actually changed after snap to avoid unnecessary renders/calls\n        const currentValue = isControlled ? value! : uncontrolledValue\n        const currentValueArray = Array.isArray(currentValue)\n          ? currentValue\n          : [currentValue]\n\n        if (JSON.stringify(finalValue) !== JSON.stringify(currentValueArray)) {\n          // 1. Update internal state IF NOT externally controlled\n          if (!isControlled) {\n            setUncontrolledValue(finalValue)\n          }\n          // 2. Always notify parent component with SET value.\n          onValueChange?.(finalValue)\n        }\n      },\n      [\n        isControlled,\n        onValueChange,\n        showTicks,\n        tickValues,\n        findClosestValue,\n        value,\n        uncontrolledValue\n      ]\n    )\n\n    const handleInputChange = (\n      event: React.ChangeEvent<HTMLInputElement>,\n      index: number\n    ) => {\n      const newInputStrings = [...inputStringValues]\n      newInputStrings[index] = event.target.value\n      setInputStringValues(newInputStrings)\n    }\n\n    const validateAndCommitValue = React.useCallback(\n      (index: number) => {\n        const rawString = inputStringValues[index]\n        let numericValue = parseFloat(rawString)\n        const currentSliderValueArray = displayValue\n\n        if (isNaN(numericValue)) {\n          numericValue = currentSliderValueArray[index]\n        } else {\n          numericValue = Math.min(Math.max(numericValue, min), max) // Clamp\n        }\n\n        // *** SNAP TO TICK: Set to nearest tick BEFORE comparing/sending ***\n        if (showTicks && tickValues.length > 0) {\n          numericValue = findClosestValue(numericValue, tickValues)\n        }\n\n        const newValueArray = [...currentSliderValueArray]\n        // Only update if the numeric value actually changed from the current state\n        if (Math.abs(currentSliderValueArray[index] - numericValue) > 1e-9) {\n          newValueArray[index] = numericValue\n          // Call the main handler that already does the snap and notification\n          handleSliderChange(newValueArray)\n        } else {\n          // If the numeric value (already set to tick) is the same,\n          // but the input string is different, resynchronize input.\n          const finalNumericValueStr = String(numericValue) // Use the value already set/validated\n          if (rawString !== finalNumericValueStr) {\n            const finalStrings = currentSliderValueArray.map(String) // Rebuild strings from the current state\n            finalStrings[index] = finalNumericValueStr\n            setInputStringValues(finalStrings)\n          }\n        }\n      },\n      [\n        inputStringValues,\n        displayValue,\n        min,\n        max,\n        showTicks,\n        tickValues,\n        handleSliderChange,\n        findClosestValue\n      ]\n    )\n\n    const handleThumbPointerDown = (index: number) => {\n      if (showTooltip) {\n        setActiveThumbIndex(index)\n      }\n    }\n\n    const showLabels = startLabel || endLabel\n    const currentTooltipValue =\n      activeThumbIndex !== null ? displayValue[activeThumbIndex] : undefined\n\n    return (\n      <div className=\"w-full\">\n        {withOutput && (\n          <div className=\"mb-1 flex justify-end\">\n            <output className=\"text-sm font-medium tabular-nums\">\n              {displayValue.length > 1\n                ? displayValue.join(\" - \")\n                : displayValue[0]}\n            </output>\n          </div>\n        )}\n\n        <div\n          className={cn(\n            \"flex\",\n            showLabels ? \"items-center\" : \"items-start\",\n            withInput ? \"gap-4\" : \"gap-0\"\n          )}\n        >\n          <div\n            ref={sliderAndTicksContainerRef}\n            className={cn(\n              \"relative w-full\",\n              withInput ? \"flex-grow\" : \"\",\n              showTicks ? \"pb-6\" : \"pb-1\"\n            )}\n          >\n\n            {showLabels && (\n              <span\n                className={cn(\n                  \"mb-1 flex w-full items-center justify-between gap-2 text-xs font-medium text-muted-foreground\"\n                )}\n                aria-hidden=\"true\"\n              >\n                <span>{startLabel}</span>\n                <span>{endLabel}</span>\n              </span>\n            )}\n\n\n            {showTooltip && (\n              <div\n                style={tooltipStyle}\n                className={cn(\n                  \"rounded bg-foreground px-2 py-0.5 text-xs font-semibold text-background shadow-md\",\n                  \"transition-opacity duration-100 ease-out\"\n                )}\n              >\n                {activeThumbIndex !== null ? currentTooltipValue : \"\"}\n              </div>\n            )}\n\n            <SliderPrimitive.Root\n              ref={ref}\n              value={displayValue}\n              defaultValue={initialValue}\n              onValueChange={handleSliderChange}\n              min={min}\n              max={max}\n              step={step}\n              className={cn(\n                sliderRootVariants({ variant }),\n                showTooltip ? \"pt-1\" : \"\",\n                className\n              )}\n              {...restSliderProps}\n            >\n              <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n                <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n              </SliderPrimitive.Track>\n              {displayValue.map((_, index) => (\n                <SliderPrimitive.Thumb\n                  key={index}\n                  ref={(el) => {\n                    thumbRefs.current[index] = el\n                  }}\n                  onPointerDownCapture={() => handleThumbPointerDown(index)}\n                  className=\"z-10 block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\"\n                />\n              ))}\n            </SliderPrimitive.Root>\n\n            {showTicks && tickValues.length > 0 && (\n              <div\n                className={cn(\n                  \"absolute bottom-0 left-0 right-0 h-6 select-none\",\n                  variant !== \"thin\" ? \"mx-[0.65rem]\" : \"mx-[0.3rem]\"\n                )}\n                aria-hidden=\"true\"\n              >\n                {tickValues.map((tickValue, i) => {\n                  const range = max - min\n                  const percent =\n                    range > 0\n                      ? ((tickValue - min) / range) * 100\n                      : tickValue === min\n                        ? 0\n                        : 100\n                  return (\n                    <span\n                      key={i}\n                      className=\"absolute top-0 flex flex-col items-center\"\n                      style={{\n                        left: `${percent}%`,\n                        transform: \"translateX(-50%)\"\n                      }}\n                    >\n                      <span className=\"h-1.5 w-px bg-muted-foreground/70\" />\n                      {/* Line */}\n                      <span className=\"mt-1 text-[10px] font-medium text-muted-foreground\">\n                        {/* Label */}\n                        {tickValue}\n                      </span>\n                    </span>\n                  )\n                })}\n              </div>\n            )}\n          </div>\n\n          {withInput &&\n            displayValue.map((_, index) => (\n              <input\n                key={index}\n                type=\"text\"\n                inputMode=\"decimal\"\n                value={inputStringValues[index] ?? \"\"}\n                onChange={(e) => handleInputChange(e, index)}\n                onBlur={() => validateAndCommitValue(index)}\n                onKeyDown={(e) => {\n                  if (e.key === \"Enter\") {\n                    validateAndCommitValue(index)\n                    ;(e.target as HTMLInputElement).blur()\n                  } else if (e.key === \"Escape\") {\n                    setInputStringValues(displayValue.map(String))\n                    ;(e.target as HTMLInputElement).blur()\n                  }\n                }}\n                className={cn(\n                  \"h-8 w-14 shrink-0 rounded-md border border-input bg-transparent px-2 py-1 text-sm shadow-sm transition-colors\",\n                  \"file:border-0 file:bg-transparent file:text-sm file:font-medium\",\n                  \"placeholder:text-muted-foreground\",\n                  \"focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring\",\n                  \"disabled:cursor-not-allowed disabled:opacity-50\",\n                  \"text-center tabular-nums\"\n                )}\n                aria-label={`Value ${index + 1}`}\n              />\n            ))}\n        </div>\n      </div>\n    )\n  }\n)\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport type { SliderProps }\n",
      "type": "registry:ui"
    }
  ]
}