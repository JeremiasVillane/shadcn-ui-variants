{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "accordion",
  "type": "registry:ui",
  "title": "Accordion",
  "description": "An accordion component with many variations and styles.",
  "dependencies": [
    "@radix-ui/react-accordion"
  ],
  "files": [
    {
      "path": "components/ui/accordion.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\ninterface AccordionProps {\n  /** @default \"default\" */\n  variant?: \"default\" | \"separated\" | \"contained\" | \"tabs\"\n  /** @default \"outline\" */\n  styleVariant?: \"outline\" | \"fill\"\n  type: \"single\" | \"multiple\"\n  /** @default false */\n  collapsible?: boolean\n}\n\ninterface AccordionContextValue {\n  variant: AccordionProps[\"variant\"]\n  styleVariant: AccordionProps[\"styleVariant\"]\n}\n\nconst AccordionContext = React.createContext<AccordionContextValue>({\n  variant: \"default\",\n  styleVariant: \"outline\"\n})\n\nconst accordionVariants = cva(\"max-w-lg my-4 w-full\", {\n  variants: {\n    variant: {\n      default: \"\",\n      separated: \"space-y-2\",\n      contained: \"\",\n      tabs: \"space-y-2\"\n    }\n  },\n  defaultVariants: {\n    variant: \"default\"\n  }\n})\n\nconst accordionItemVariants = cva(\"\", {\n  // Managed in compound\n  variants: {\n    variant: {\n      default: \"\",\n      separated: \"\",\n      contained: \"\",\n      tabs: \"\"\n    },\n    styleVariant: {\n      outline: \"\",\n      fill: \"\"\n    }\n  },\n  compoundVariants: [\n    { variant: \"default\", className: \"border-b px-4\" },\n    {\n      variant: \"separated\",\n      styleVariant: \"outline\",\n      className: \"px-4 border rounded-md\"\n    },\n    {\n      variant: \"separated\",\n      styleVariant: \"fill\",\n      className: \"px-4 border-none rounded-md bg-secondary\"\n    },\n    {\n      variant: \"contained\",\n      styleVariant: \"outline\",\n      className:\n        \"px-4 border border-b-0 last:border-b first:rounded-t-md last:rounded-b-md\"\n    },\n    {\n      variant: \"contained\",\n      styleVariant: \"fill\",\n      className:\n        \"px-4 border-b last:border-none first:rounded-t-md last:rounded-b-md bg-muted\"\n    },\n    {\n      variant: \"tabs\",\n      styleVariant: \"fill\",\n      className: \"px-4 border-none rounded-md data-[state=open]:bg-secondary\"\n    },\n    {\n      variant: \"tabs\",\n      styleVariant: \"outline\",\n      className: \"px-4 border rounded-md data-[state=closed]:border-none\"\n    }\n  ],\n  defaultVariants: {\n    variant: \"default\",\n    styleVariant: \"outline\"\n  }\n})\n\ntype AccordionPrimitiveRootProps = React.ComponentPropsWithoutRef<\n  typeof AccordionPrimitive.Root\n>\n\n/** An accordion component with many variations and styles. */\nexport const Accordion = ({\n  variant = \"default\",\n  styleVariant = \"outline\",\n  className,\n  children,\n  ...props\n}: AccordionPrimitiveRootProps & AccordionProps) => {\n  return (\n    <AccordionContext.Provider value={{ variant, styleVariant }}>\n      <AccordionPrimitive.Root\n        className={cn(accordionVariants({ variant }), className)}\n        {...props}\n      >\n        {children}\n      </AccordionPrimitive.Root>\n    </AccordionContext.Provider>\n  )\n}\n\nconst AccordionItem = React.forwardRef<\n  React.ComponentRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  const { variant, styleVariant } = React.useContext(AccordionContext)\n  return (\n    <AccordionPrimitive.Item\n      ref={ref}\n      className={cn(\n        accordionItemVariants({ variant, styleVariant }),\n        className\n      )}\n      {...props}\n    />\n  )\n})\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ComponentRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => {\n  const { variant } = React.useContext(AccordionContext)\n  return (\n    <AccordionPrimitive.Header className=\"flex\">\n      <AccordionPrimitive.Trigger\n        ref={ref}\n        className={cn(\n          \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n          variant === \"tabs\" ? \"data-[state=closed]:py-2\" : \"\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n      </AccordionPrimitive.Trigger>\n    </AccordionPrimitive.Header>\n  )\n})\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ComponentRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"pb-4 pt-0\">{children}</div>\n  </AccordionPrimitive.Content>\n))\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { AccordionContent, AccordionItem, AccordionTrigger }\nexport type { AccordionProps }\n",
      "type": "registry:ui"
    }
  ],
  "tailwind": {
    "config": {
      "theme": {
        "extend": {
          "keyframes": {
            "accordion-down": {
              "from": {
                "height": "0"
              },
              "to": {
                "height": "var(--radix-accordion-content-height)"
              }
            },
            "accordion-up": {
              "from": {
                "height": "var(--radix-accordion-content-height)"
              },
              "to": {
                "height": "0"
              }
            }
          },
          "animation": {
            "accordion-down": "accordion-down 0.2s ease-out",
            "accordion-up": "accordion-up 0.2s ease-out"
          }
        }
      }
    }
  }
}