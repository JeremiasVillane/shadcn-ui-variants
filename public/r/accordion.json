{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "accordion",
  "type": "registry:ui",
  "title": "Accordion",
  "description": "An accordion component with many variations and styles.",
  "dependencies": [
    "@radix-ui/react-accordion"
  ],
  "files": [
    {
      "path": "components/ui/accordion.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown, PlusIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\ninterface AccordionProps {\n  /** Specifies the display variant of the accordion.\n   * @default \"default\" */\n  variant?: \"default\" | \"separated\" | \"contained\" | \"tabs\"\n\n  /** Determines the style variant for the accordion's appearance.\n   *  @default \"outline\" */\n  styleVariant?: \"outline\" | \"fill\"\n\n  /** Specifies the icon used for the trigger.\n   * @default \"chevron\" */\n  trigger?: \"chevron\" | \"plus-minus\"\n\n  /** Specifies the position of the trigger icon.\n   * @default \"right\" */\n  triggerPosition?: \"right\" | \"left\"\n\n  /**  Indicates the accordion behavior. Use \"single\" to allow only one section to be open at a time,\n   * or \"multiple\" to permit multiple sections to be open simultaneously.\n   * @default \"single\" */\n  type: \"single\" | \"multiple\"\n\n  /** Enables or disables the ability for sections to be collapsed.\n   *  @default true */\n  collapsible?: boolean\n}\n\ninterface AccordionContextValue {\n  variant: AccordionProps[\"variant\"]\n  styleVariant: AccordionProps[\"styleVariant\"]\n  trigger: AccordionProps[\"trigger\"]\n  triggerPosition: AccordionProps[\"triggerPosition\"]\n}\n\nconst AccordionContext = React.createContext<AccordionContextValue>({\n  variant: \"default\",\n  styleVariant: \"outline\",\n  trigger: \"chevron\",\n  triggerPosition: \"right\"\n})\n\nconst accordionVariants = cva(\"max-w-lg my-4 w-full\", {\n  variants: {\n    variant: {\n      default: \"\",\n      separated: \"space-y-2\",\n      contained: \"\",\n      tabs: \"space-y-2\"\n    }\n  },\n  defaultVariants: {\n    variant: \"default\"\n  }\n})\n\nconst accordionItemVariants = cva(\"\", {\n  // Managed in compound\n  variants: {\n    variant: {\n      default: \"\",\n      separated: \"\",\n      contained: \"\",\n      tabs: \"\"\n    },\n    styleVariant: {\n      outline: \"\",\n      fill: \"\"\n    }\n  },\n  compoundVariants: [\n    { variant: \"default\", className: \"border-b px-4\" },\n    {\n      variant: \"separated\",\n      styleVariant: \"outline\",\n      className: \"px-4 border rounded-md hover:border-muted-foreground/80\"\n    },\n    {\n      variant: \"separated\",\n      styleVariant: \"fill\",\n      className:\n        \"px-4 border-none rounded-md bg-secondary/80 hover:bg-secondary\"\n    },\n    {\n      variant: \"contained\",\n      styleVariant: \"outline\",\n      className:\n        \"px-4 border border-b-0 last:border-b first:rounded-t-md last:rounded-b-md\"\n    },\n    {\n      variant: \"contained\",\n      styleVariant: \"fill\",\n      className:\n        \"px-4 border-b last:border-none first:rounded-t-md last:rounded-b-md bg-secondary/80 hover:bg-secondary\"\n    },\n    {\n      variant: \"tabs\",\n      styleVariant: \"fill\",\n      className: \"px-4 border-none rounded-md data-[state=open]:bg-secondary\"\n    },\n    {\n      variant: \"tabs\",\n      styleVariant: \"outline\",\n      className: \"px-4 border rounded-md data-[state=closed]:border-none\"\n    }\n  ],\n  defaultVariants: {\n    variant: \"default\",\n    styleVariant: \"outline\"\n  }\n})\n\ntype AccordionPrimitiveRootProps = React.ComponentPropsWithoutRef<\n  typeof AccordionPrimitive.Root\n>\n\nconst Accordion = ({\n  variant = \"default\",\n  styleVariant = \"outline\",\n  trigger = \"chevron\",\n  triggerPosition = \"right\",\n  className,\n  children,\n  ...props\n}: AccordionPrimitiveRootProps & AccordionProps) => {\n  return (\n    <AccordionContext.Provider\n      value={{ variant, styleVariant, trigger, triggerPosition }}\n    >\n      <AccordionPrimitive.Root\n        className={cn(accordionVariants({ variant }), className)}\n        {...props}\n      >\n        {children}\n      </AccordionPrimitive.Root>\n    </AccordionContext.Provider>\n  )\n}\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  const { variant, styleVariant } = React.useContext(AccordionContext)\n  return (\n    <AccordionPrimitive.Item\n      ref={ref}\n      className={cn(\n        accordionItemVariants({ variant, styleVariant }),\n        className\n      )}\n      {...props}\n    />\n  )\n})\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger> & {\n    collapsible?: boolean\n  }\n>(({ className, children, collapsible = true, ...props }, ref) => {\n  const { variant, trigger, triggerPosition } =\n    React.useContext(AccordionContext)\n\n  let hasTitle = false\n  let hasSubtitle = false\n\n  React.Children.forEach(children, (child) => {\n    if (React.isValidElement(child)) {\n      if ((child.type as any).isAccordionTitle) {\n        hasTitle = true\n      }\n      if ((child.type as any).isAccordionSubtitle) {\n        hasSubtitle = true\n      }\n    }\n  })\n\n  const applyMargin = hasTitle && hasSubtitle\n\n  return (\n    <AccordionPrimitive.Header className=\"flex\">\n      <AccordionPrimitive.Trigger\n        ref={ref}\n        className={cn(\n          \"flex flex-1 items-center justify-between py-4 font-medium transition-all [&[data-state=open]>svg]:rotate-180\",\n          variant === \"tabs\" ? \"data-[state=closed]:py-2\" : \"\",\n          trigger === \"plus-minus\"\n            ? \"category>svg>path:last-child]:rotate-90 [&>svg>path:last-child]:origin-center [&>svg>path:last-child]:transition-all [&>svg>path:last-child]:duration-200 [&[data-state=open]>svg>path:last-child]:opacity-0 [&[data-state=open]>svg]:rotate-180\"\n            : \"\",\n          triggerPosition === \"left\"\n            ? \"justify-start gap-3 [&>svg]:-order-1\"\n            : \"\",\n          applyMargin ? \"[&>svg]:-mt-4\" : \"\",\n          className\n        )}\n        onClick={(e) => !collapsible && e.preventDefault()}\n        {...props}\n      >\n        <section className=\"flex flex-col items-start\">{children}</section>\n        {trigger === \"chevron\" ? (\n          <ChevronDown\n            size={16}\n            className=\"shrink-0 opacity-60 transition-transform duration-200\"\n          />\n        ) : (\n          <PlusIcon\n            size={16}\n            className=\"pointer-events-none shrink-0 opacity-60 transition-transform duration-200\"\n            aria-hidden=\"true\"\n          />\n        )}\n      </AccordionPrimitive.Trigger>\n    </AccordionPrimitive.Header>\n  )\n})\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionTitle = React.forwardRef<\n  HTMLHeadingElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, children, ...props }, ref) => {\n  return (\n    <h1\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between font-medium\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </h1>\n  )\n})\nAccordionTitle.displayName = \"AccordionTitle\"\n;(AccordionTitle as any).isAccordionTitle = true\n\nconst AccordionSubtitle = React.forwardRef<\n  HTMLHeadingElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, children, ...props }, ref) => (\n  <h2 ref={ref} className={cn(\"text-sm font-normal\", className)} {...props}>\n    {children}\n  </h2>\n))\nAccordionSubtitle.displayName = \"AccordionSubtitle\"\n;(AccordionSubtitle as any).isAccordionSubtitle = true\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => {\n  const { triggerPosition } = React.useContext(AccordionContext)\n  return (\n    <AccordionPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"overflow-hidden text-sm text-muted-foreground transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\",\n        triggerPosition === \"left\" ? \"ps-7\" : \"\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"pb-4 pt-0\">{children}</div>\n    </AccordionPrimitive.Content>\n  )\n})\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n  AccordionTitle,\n  AccordionSubtitle\n}\nexport type { AccordionProps }\n",
      "type": "registry:ui"
    }
  ],
  "tailwind": {
    "config": {
      "theme": {
        "extend": {
          "keyframes": {
            "accordion-down": {
              "from": {
                "height": "0"
              },
              "to": {
                "height": "var(--radix-accordion-content-height)"
              }
            },
            "accordion-up": {
              "from": {
                "height": "var(--radix-accordion-content-height)"
              },
              "to": {
                "height": "0"
              }
            }
          },
          "animation": {
            "accordion-down": "accordion-down 0.2s ease-out",
            "accordion-up": "accordion-up 0.2s ease-out"
          }
        }
      }
    }
  }
}