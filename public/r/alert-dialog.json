{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "alert-dialog",
  "type": "registry:ui",
  "title": "Alert Dialog",
  "description": "Extended alert dialog with variants and extra props to handle different scenarios.",
  "dependencies": [
    "@radix-ui/react-alert-dialog"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "components/ui/alert-dialog.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\nimport { cva } from \"class-variance-authority\"\nimport {\n  AlertTriangle,\n  CheckCircle,\n  Info,\n  InfoIcon,\n  X,\n  XCircle\n} from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\ninterface AlertDialogProps\n  extends React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Root> {\n  /** @default \"default\" */\n  variant?: \"default\" | \"success\" | \"destructive\" | \"warning\" | \"info\"\n  /** @default \"left\" */\n  styleVariant?: \"left\" | \"center\"\n  /** @default false */\n  withIcon?: boolean\n  customIcon?: React.ReactNode\n  /** @default false */\n  separatedHeader?: boolean\n  /** @default false */\n  separatedFooter?: boolean\n}\n\ninterface AlertDialogContextValue {\n  variant: AlertDialogProps[\"variant\"]\n  styleVariant: AlertDialogProps[\"styleVariant\"]\n  withIcon: boolean\n  customIcon?: React.ReactNode\n  separatedHeader: boolean\n  separatedFooter: boolean\n}\n\nconst AlertDialogContext = React.createContext<AlertDialogContextValue>({\n  variant: \"default\",\n  styleVariant: \"left\",\n  withIcon: false,\n  separatedHeader: false,\n  separatedFooter: false\n})\n\nconst alertDialogContentVariants = cva(\n  \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background shadow-lg duration-200 sm:rounded-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%]\"\n)\n\nconst headerVariantColors: Record<string, string> = {\n  default: \"\",\n  success: \"text-green-600\",\n  destructive: \"text-red-600\",\n  warning: \"text-yellow-600\",\n  info: \"text-blue-600\"\n}\n\n// Specific bar/body layout for 'separated-header' is handled inside the component logic.\nconst alertDialogHeaderVariants = cva(\"flex flex-col space-y-2\", {\n  variants: {\n    variant: headerVariantColors,\n    styleVariant: {\n      left: \"text-left\",\n      center: \"text-center\"\n    }\n  },\n  defaultVariants: {\n    variant: \"default\",\n    styleVariant: \"left\"\n  }\n})\n\nconst alertDialogTitleVariants = cva(\"text-lg font-semibold\", {\n  variants: {\n    // Is an inline icon being rendered *by the title*? (Only for separated-header)\n    hasInlineIcon: {\n      true: \"flex items-center gap-2\",\n      false: \"\"\n    }\n  },\n  defaultVariants: {\n    hasInlineIcon: false\n  }\n})\n\nconst alertDialogFooterVariants = cva(\n  \"flex flex-col-reverse sm:flex-row sm:space-x-2\",\n  {\n    variants: {\n      styleVariant: {\n        left: \"sm:justify-end\",\n        center: \"sm:justify-center\"\n      }\n    },\n    defaultVariants: {\n      styleVariant: \"left\"\n    }\n  }\n)\n\nconst variantIcons = {\n  default: <InfoIcon />,\n  success: <CheckCircle className=\"text-green-600\" />,\n  destructive: <XCircle className=\"text-red-600\" />,\n  warning: <AlertTriangle className=\"text-yellow-600\" />,\n  info: <Info className=\"text-blue-600\" />\n}\n\ntype AlertDialogPrimitiveRootProps = React.ComponentPropsWithoutRef<\n  typeof AlertDialogPrimitive.Root\n>\n\nconst AlertDialog = ({\n  variant = \"default\",\n  styleVariant = \"left\",\n  withIcon = false,\n  customIcon,\n  separatedHeader = false,\n  separatedFooter = false,\n  children,\n  ...props\n}: AlertDialogPrimitiveRootProps & AlertDialogProps) => (\n  <AlertDialogContext.Provider\n    value={{\n      variant,\n      styleVariant,\n      withIcon,\n      customIcon,\n      separatedHeader,\n      separatedFooter\n    }}\n  >\n    <AlertDialogPrimitive.Root {...props}>{children}</AlertDialogPrimitive.Root>\n  </AlertDialogContext.Provider>\n)\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ComponentRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ComponentRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => {\n  const { separatedHeader } = React.useContext(AlertDialogContext)\n  return (\n    <AlertDialogPortal>\n      <AlertDialogOverlay />\n      <AlertDialogPrimitive.Content\n        ref={ref}\n        className={cn(\n          alertDialogContentVariants(),\n          separatedHeader ? \"p-6 pt-4\" : \"p-6\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </AlertDialogPrimitive.Content>\n    </AlertDialogPortal>\n  )\n})\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, children, ...props }, ref) => {\n  const { variant, styleVariant, withIcon, customIcon, separatedHeader } =\n    React.useContext(AlertDialogContext)\n\n  // Prepare children arrays\n  const titleElements: React.ReactNode[] = []\n  const descriptionElements: React.ReactNode[] = []\n  const otherElements: React.ReactNode[] = []\n\n  // Sort children into categories\n  React.Children.forEach(children, (child) => {\n    if (React.isValidElement(child)) {\n      if (\n        typeof child.type !== \"string\" &&\n        (child.type as React.FC & { displayName?: string }).displayName ===\n          AlertDialogTitle.displayName\n      ) {\n        titleElements.push(child)\n      } else if (\n        typeof child.type !== \"string\" &&\n        (child.type as React.FC & { displayName?: string }).displayName ===\n          AlertDialogDescription.displayName\n      ) {\n        descriptionElements.push(child)\n      } else {\n        otherElements.push(child)\n      }\n    } else {\n      otherElements.push(child) // Keep text nodes, etc.\n    }\n  })\n\n  const bodyIcon = customIcon ?? (variant ? variantIcons[variant] : null)\n\n  if (separatedHeader) {\n    // --- Separated Header Rendering ---\n    return (\n      <div ref={ref} className={cn(\"flex flex-col\", className)} {...props}>\n        {/* 1. Header Bar */}\n        <div\n          className={cn(\n            \"-mx-6 mb-0 flex items-center justify-between border-b px-6 pb-3\",\n            headerVariantColors[variant ?? \"default\"] || \"text-foreground\"\n          )}\n        >\n          {/* Render Title(s) inside the bar */}\n          <div\n            className={cn(\n              \"flex min-w-0 flex-grow items-center\",\n              styleVariant === \"center\" ? \"justify-center\" : \"justify-start\"\n            )}\n          >\n            {titleElements}\n          </div>\n\n          {/* Automatic Close Button */}\n          <AlertDialogPrimitive.Cancel\n            className={cn(\n              buttonVariants({\n                variant: \"ghost\",\n                size: \"icon\",\n                className: \"!ml-4 !h-7 !w-7 flex-shrink-0\"\n              }),\n              \"text-muted-foreground hover:text-accent-foreground\"\n            )}\n            aria-label=\"Close\"\n          >\n            <X className=\"h-4 w-4\" />\n          </AlertDialogPrimitive.Cancel>\n        </div>\n\n        {/* 2. Body Area (Description + Others) */}\n        <div\n          className={cn(\n            \"w-full pt-5\",\n            styleVariant === \"center\" ? \"text-center\" : \"text-left\"\n          )}\n        >\n          {descriptionElements}\n          {otherElements}\n        </div>\n      </div>\n    )\n  } else {\n    // --- Standard Header Rendering ---\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          alertDialogHeaderVariants({ variant, styleVariant }),\n          className\n        )}\n        {...props}\n      >\n        {withIcon && bodyIcon && (\n          <div\n            className={cn(\n              \"mx-auto flex items-center justify-center rounded-full\",\n              styleVariant === \"left\"\n                ? \"mb-1 size-9 sm:mx-0 [&>svg]:size-5\"\n                : \"mb-2 size-14 [&>svg]:size-7\",\n              variant === \"default\" ? \"bg-muted\" : \"\",\n              variant === \"success\" ? \"bg-green-600/10\" : \"\",\n              variant === \"destructive\" ? \"bg-destructive/10\" : \"\",\n              variant === \"warning\" ? \"bg-yellow-600/10\" : \"\",\n              variant === \"info\" ? \"bg-blue-600/10\" : \"\"\n            )}\n          >\n            {bodyIcon}\n          </div>\n        )}\n        {children}\n      </div>\n    )\n  }\n})\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\n// AlertDialogTitle: Handles inline icon rendering for separated header\nconst AlertDialogTitle = React.forwardRef<\n  React.ComponentRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, children, ...props }, ref) => {\n  const { variant, withIcon, customIcon, separatedHeader } =\n    React.useContext(AlertDialogContext)\n\n  // Icon specifically for *inline* rendering in separated header title\n  const inlineIconVariant = variant\n  const inlineIcon =\n    customIcon ?? (inlineIconVariant ? variantIcons[inlineIconVariant] : null)\n  const showInlineIcon = !!(separatedHeader && withIcon && inlineIcon)\n\n  return (\n    <AlertDialogPrimitive.Title\n      ref={ref}\n      className={cn(\n        alertDialogTitleVariants({ hasInlineIcon: showInlineIcon }),\n        className\n      )}\n      {...props}\n    >\n      {/* Render INLINE icon if separated */}\n      {showInlineIcon &&\n        React.isValidElement(inlineIcon) &&\n        React.cloneElement(\n          inlineIcon as React.ReactElement<{ className?: string }>,\n          {\n            className: cn(\n              \"h-5 w-5 flex-shrink-0\",\n              (inlineIcon as React.ReactElement<{ className?: string }>).props\n                .className\n            )\n          }\n        )}\n      {/* The actual title text */}\n      {children}\n    </AlertDialogPrimitive.Title>\n  )\n})\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ComponentRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-balance text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { styleVariant, separatedFooter } = React.useContext(AlertDialogContext)\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        alertDialogFooterVariants({ styleVariant }),\n        separatedFooter ? \"-mx-6 -mb-6 border-t px-6 py-3\" : \"\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogAction = React.forwardRef<\n  React.ComponentRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ComponentRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogOverlay,\n  AlertDialogPortal,\n  AlertDialogTitle,\n  AlertDialogTrigger\n}\nexport type { AlertDialogProps }\n",
      "type": "registry:ui"
    }
  ]
}