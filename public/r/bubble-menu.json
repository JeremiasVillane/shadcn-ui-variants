{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "bubble-menu",
  "type": "registry:ui",
  "title": "Bubble Menu",
  "description": "A circular menu that expands with child elements positioned around a central button.",
  "files": [
    {
      "path": "components/ui/bubble-menu.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { Plus } from \"lucide-react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nexport const dynamic = \"auto\"\r\n\r\ninterface BubbleMenuProps {\r\n  /**\r\n   * The content of the bubble menu, typically interactive elements like buttons or links.\r\n   */\r\n  children?: React.ReactNode\r\n  /**\r\n   * The distance of the child elements from the center button in pixels.\r\n   * @default 60 */\r\n  radius?: number\r\n  /**\r\n   * The size (width and height) of the main toggle button in pixels.\r\n   * @default 40 */\r\n  buttonSize?: number\r\n  /**\r\n   * The size (width and height) of the individual child action buttons in pixels.\r\n   * @default 35 */\r\n  subButtonSize?: number\r\n}\r\n\r\nfunction useClickOutside(\r\n  ref: React.RefObject<HTMLElement | null>,\r\n  callback: () => void\r\n) {\r\n  React.useEffect(() => {\r\n    function handleClickOutside(event: MouseEvent) {\r\n      if (ref?.current && !ref?.current.contains(event.target as Node)) {\r\n        callback()\r\n      }\r\n    }\r\n\r\n    document.addEventListener(\"mousedown\", handleClickOutside)\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutside)\r\n    }\r\n  }, [ref, callback])\r\n}\r\n\r\nfunction BubbleMenu({\r\n  children,\r\n  radius = 60,\r\n  buttonSize = 40,\r\n  subButtonSize = 35,\r\n  className,\r\n  ...props\r\n}: BubbleMenuProps & React.ComponentPropsWithRef<\"div\">) {\r\n  const [isOpen, setIsOpen] = React.useState(false)\r\n  const [isMounted, setIsMounted] = React.useState(false)\r\n\r\n  const totalChildren = React.Children.count(children)\r\n  const menuRef = React.useRef<HTMLDivElement>(null)\r\n\r\n  React.useEffect(() => {\r\n    setIsMounted(true)\r\n  }, [])\r\n\r\n  useClickOutside(menuRef, () => {\r\n    if (isOpen) setIsOpen(false)\r\n  })\r\n\r\n  if (!isMounted) {\r\n    return (\r\n      <div\r\n        className={cn(\"relative\", className)}\r\n        style={{ width: `${buttonSize}px`, height: `${buttonSize}px` }}\r\n        {...props}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div\r\n      ref={menuRef}\r\n      className={cn(\"relative\", className)}\r\n      style={{ width: `${buttonSize}px`, height: `${buttonSize}px` }}\r\n      {...props}\r\n    >\r\n      <button\r\n        onClick={(e) => {\r\n          e.stopPropagation()\r\n          setIsOpen(!isOpen)\r\n        }}\r\n        className={`absolute left-1/2 top-1/2 flex -translate-x-1/2 -translate-y-1/2 items-center justify-center rounded-full bg-muted text-muted-foreground shadow-md transition-[transform,shadow] duration-200 hover:bg-gray-200 hover:shadow-lg active:scale-90 dark:hover:bg-gray-800 ${isOpen ? \"bg-background shadow-sm\" : \"\"} `}\r\n        style={{ width: `${buttonSize}px`, height: `${buttonSize}px` }}\r\n        aria-label=\"Toggle bubble menu\"\r\n      >\r\n        <Plus\r\n          className={cn(\r\n            \"size-4 transition-transform duration-200 ease-in-out\",\r\n            isOpen ? \"-rotate-45\" : \"\"\r\n          )}\r\n        />\r\n      </button>\r\n\r\n      <div className=\"pointer-events-none absolute left-0 top-0 z-50 size-full\">\r\n        {React.Children.map(children, (child, index) => {\r\n          const angle = (index * 360) / totalChildren\r\n          const radians = (angle * Math.PI) / 180\r\n          const x = Math.cos(radians) * radius\r\n          const y = Math.sin(radians) * radius\r\n\r\n          return (\r\n            <div\r\n              className={`absolute flex items-center justify-center rounded-full bg-muted shadow-md transition-[opacity,transform] duration-200 ease-in-out hover:bg-gray-200 dark:hover:bg-gray-800 ${\r\n                isOpen\r\n                  ? \"pointer-events-auto scale-100 opacity-100\"\r\n                  : \"pointer-events-none scale-50 opacity-0\"\r\n              }`}\r\n              style={{\r\n                width: `${subButtonSize}px`,\r\n                height: `${subButtonSize}px`,\r\n                left: `calc(50% - ${subButtonSize / 2}px)`,\r\n                top: `calc(50% - ${subButtonSize / 2}px)`,\r\n                transform: isOpen\r\n                  ? `translate(${x}px, ${y}px)`\r\n                  : \"translate(0, 0)\",\r\n                transitionDelay: `${isOpen ? index * 0.1 : 0}s`\r\n              }}\r\n              onClick={(e) => e.stopPropagation()}\r\n            >\r\n              <div className=\"flex size-full items-center justify-center transition-colors duration-100 ease-in-out\">\r\n                {child}\r\n              </div>\r\n            </div>\r\n          )\r\n        })}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport { BubbleMenu }\r\nexport type { BubbleMenuProps }\r\n",
      "type": "registry:ui"
    }
  ]
}