{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "color-picker",
  "type": "registry:ui",
  "title": "Color Picker",
  "description": "A versatile color picker component that allows users to select colors visually or by entering values in HEX, RGB, or HSL formats.",
  "dependencies": [
    "react-colorful"
  ],
  "registryDependencies": [
    "https://shadcn-ui-variants.vercel.app/r/button.json",
    "https://shadcn-ui-variants.vercel.app/r/input.json",
    "popover",
    "toggle-group"
  ],
  "files": [
    {
      "path": "components/ui/color-picker.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { Plus } from \"lucide-react\"\r\nimport { HexAlphaColorPicker, HexColorPicker } from \"react-colorful\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport {\r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger\r\n} from \"@/components/ui/popover\"\r\nimport { ToggleGroup, ToggleGroupItem } from \"@/components/ui/toggle-group\"\r\n\r\ninterface ColorPickerProps\r\n  extends Omit<React.ComponentPropsWithoutRef<\"button\">, \"value\" | \"onChange\"> {\r\n  /** Optional additional class names for styling. */\r\n  className?: string\r\n\r\n  /** Optional current color value. */\r\n  value?: string\r\n\r\n  /** Optional callback invoked when the color value changes. */\r\n  onChange?: (value: string) => void\r\n\r\n  /** Optional callback triggered when a new color is added. */\r\n  onAddColor?: (value: string) => void\r\n\r\n  /** Optional custom trigger element for the color picker. */\r\n  trigger?: React.ReactNode\r\n\r\n  /** Optional side of the popover, derived from PopoverContent's side property.\r\n   * @default \"bottom\" */\r\n  popoverSide?: \"top\" | \"right\" | \"bottom\" | \"left\"\r\n\r\n  /** Optional alignment of the popover, derived from PopoverContent's align property.\r\n   * @default \"center\" */\r\n  popoverAlign?: \"start\" | \"center\" | \"end\"\r\n\r\n  /** Optional initial default color. */\r\n  defaultColor?: string\r\n\r\n  /** Optional array of preset color strings available for selection. */\r\n  presetColors?: string[]\r\n\r\n  /** Optional flag to enable alpha (transparency) control.\r\n   * @default false */\r\n  withAlpha?: boolean\r\n\r\n  /** Optional format display option for color representation.\r\n   * @default { hex: true, rgb: true, hsl: true } */\r\n  showFormat?: ColorPickerFormatOption\r\n\r\n  /** Optional title for the color selector. */\r\n  selectorTitle?: React.ReactNode\r\n}\r\n\r\ntype ColorPickerFormatOption = {\r\n  hex?: boolean\r\n  rgb?: boolean\r\n  hsl?: boolean\r\n}\r\n\r\ntype ColorFormat = \"hex\" | \"rgb\" | \"hsl\"\r\n\r\n// Color Conversion Utilities\r\ninterface RgbaColor {\r\n  r: number\r\n  g: number\r\n  b: number\r\n  a: number\r\n}\r\ninterface HslaColor {\r\n  h: number\r\n  s: number\r\n  l: number\r\n  a: number\r\n}\r\n\r\nfunction debounce<T extends (...args: any[]) => void>(\r\n  func: T,\r\n  delay: number\r\n): T {\r\n  let timeoutId: ReturnType<typeof setTimeout>\r\n  return ((...args: Parameters<T>) => {\r\n    clearTimeout(timeoutId)\r\n    timeoutId = setTimeout(() => {\r\n      func(...args)\r\n    }, delay)\r\n  }) as T\r\n}\r\n\r\nfunction rgbaToHex(r: number, g: number, b: number, a: number = 1): string {\r\n  const toHex = (n: number) => {\r\n    let hex = Math.round(n).toString(16)\r\n    return hex.length === 1 ? \"0\" + hex : hex\r\n  }\r\n  const alphaVal = Math.round(a * 255)\r\n  const alphaHex =\r\n    a === 1 || isNaN(a) || alphaVal === 255 ? \"\" : toHex(alphaVal)\r\n  return `#${toHex(r)}${toHex(g)}${toHex(b)}${alphaHex}`.toUpperCase()\r\n}\r\n\r\nfunction hexToRgba(hex: string | null | undefined): RgbaColor | null {\r\n  if (!hex) return null\r\n  hex = hex.replace(/^#/, \"\")\r\n  let r: number,\r\n    g: number,\r\n    b: number,\r\n    alpha: number = 1\r\n\r\n  if (hex.length === 3 || hex.length === 4) {\r\n    r = parseInt(hex[0] + hex[0], 16)\r\n    g = parseInt(hex[1] + hex[1], 16)\r\n    b = parseInt(hex[2] + hex[2], 16)\r\n    if (hex.length === 4) alpha = parseInt(hex[3] + hex[3], 16) / 255\r\n  } else if (hex.length === 6 || hex.length === 8) {\r\n    r = parseInt(hex.substring(0, 2), 16)\r\n    g = parseInt(hex.substring(2, 4), 16)\r\n    b = parseInt(hex.substring(4, 6), 16)\r\n    if (hex.length === 8) alpha = parseInt(hex.substring(6, 8), 16) / 255\r\n  } else {\r\n    return null\r\n  }\r\n  if (isNaN(r) || isNaN(g) || isNaN(b) || isNaN(alpha)) return null\r\n  return { r, g, b, a: alpha }\r\n}\r\n\r\nfunction hexToHsla(hex: string | null | undefined): HslaColor | null {\r\n  const rgba = hexToRgba(hex)\r\n  if (!rgba) return null\r\n  let { r, g, b, a } = rgba\r\n  r /= 255\r\n  g /= 255\r\n  b /= 255\r\n  const max = Math.max(r, g, b),\r\n    min = Math.min(r, g, b)\r\n  let h = 0,\r\n    s: number,\r\n    l = (max + min) / 2\r\n  if (max === min) {\r\n    h = s = 0\r\n  } else {\r\n    const d = max - min\r\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min)\r\n    switch (max) {\r\n      case r:\r\n        h = (g - b) / d + (g < b ? 6 : 0)\r\n        break\r\n      case g:\r\n        h = (b - r) / d + 2\r\n        break\r\n      case b:\r\n        h = (r - g) / d + 4\r\n        break\r\n    }\r\n    h /= 6\r\n  }\r\n  return {\r\n    h: Math.round(h * 360),\r\n    s: Math.round(s * 100),\r\n    l: Math.round(l * 100),\r\n    a\r\n  }\r\n}\r\n\r\nfunction hslaToHex(h: number, s: number, l: number, a: number = 1): string {\r\n  s /= 100\r\n  l /= 100\r\n  const k = (n: number) => (n + h / 30) % 12\r\n  const chrom = s * Math.min(l, 1 - l)\r\n  const f = (n: number) =>\r\n    l - chrom * Math.max(-1, Math.min(k(n) - 3, Math.min(9 - k(n), 1)))\r\n  return rgbaToHex(\r\n    Math.round(255 * f(0)),\r\n    Math.round(255 * f(8)),\r\n    Math.round(255 * f(4)),\r\n    a\r\n  )\r\n}\r\n\r\nfunction toSixDigitHex(hex: string | null | undefined): string {\r\n  if (!hex) return \"#000000\"\r\n  const rgba = hexToRgba(hex)\r\n  if (!rgba) return \"#000000\"\r\n  return rgbaToHex(rgba.r, rgba.g, rgba.b, 1).substring(0, 7)\r\n}\r\n\r\nconst DefaultColorPickerTrigger = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentProps<typeof Button> & { colorValue: string }\r\n>(({ className, colorValue, ...props }, ref) => {\r\n  return (\r\n    <Button\r\n      ref={ref}\r\n      variant=\"outline\"\r\n      className={cn(\r\n        \"h-10 w-10 self-center border p-0 text-foreground\",\r\n        className\r\n      )}\r\n      style={{ backgroundColor: colorValue }}\r\n      {...props}\r\n    ></Button>\r\n  )\r\n})\r\nDefaultColorPickerTrigger.displayName = \"DefaultColorPickerTrigger\"\r\n\r\nconst ColorValueTag = ({ valueName }: { valueName: string }) => (\r\n  <span className=\"text-sm font-medium text-muted-foreground\">{valueName}</span>\r\n)\r\n\r\nconst ColorPicker = React.forwardRef<HTMLDivElement, ColorPickerProps>(\r\n  (\r\n    {\r\n      className,\r\n      name,\r\n      value: controlledValue,\r\n      onChange: controlledOnChange,\r\n      onAddColor,\r\n      trigger,\r\n      popoverSide = \"bottom\",\r\n      popoverAlign = \"center\",\r\n      defaultColor: providedDefaultColor,\r\n      presetColors,\r\n      withAlpha = false,\r\n      showFormat = { hex: true, rgb: true, hsl: true },\r\n      selectorTitle,\r\n      ...triggerProps\r\n    }: ColorPickerProps,\r\n    ref\r\n  ) => {\r\n    const initialDefaultColor =\r\n      providedDefaultColor || (withAlpha ? \"#333333FF\" : \"#333333\")\r\n\r\n    const [internalColor, setInternalColor] = React.useState<string>(\r\n      withAlpha ? initialDefaultColor : toSixDigitHex(initialDefaultColor)\r\n    )\r\n\r\n    const isControlled = controlledValue !== undefined\r\n\r\n    const currentColor = React.useMemo(() => {\r\n      const colorSource = isControlled ? controlledValue : internalColor\r\n      let baseColor = colorSource || (withAlpha ? \"#000000FF\" : \"#000000\")\r\n      baseColor = withAlpha ? baseColor : toSixDigitHex(baseColor)\r\n      return (\r\n        hexToRgba(baseColor) ? baseColor : withAlpha ? \"#000000FF\" : \"#000000\"\r\n      ).toUpperCase()\r\n    }, [isControlled, controlledValue, internalColor, withAlpha])\r\n\r\n    const [isPopoverOpen, setIsPopoverOpen] = React.useState(false)\r\n\r\n    const [localHexInput, setLocalHexInput] =\r\n      React.useState<string>(currentColor)\r\n\r\n    React.useEffect(() => {\r\n      if (currentColor !== localHexInput) {\r\n        setLocalHexInput(currentColor)\r\n      }\r\n    }, [currentColor])\r\n\r\n    const availableFormats = React.useMemo(() => {\r\n      const formats: ColorFormat[] = []\r\n      if (showFormat?.hex) formats.push(\"hex\")\r\n      if (showFormat?.rgb) formats.push(\"rgb\")\r\n      if (showFormat?.hsl) formats.push(\"hsl\")\r\n      if (formats.length === 0) return [\"hex\" as ColorFormat] // Default to hex if none are enabled\r\n      return formats\r\n    }, [showFormat])\r\n\r\n    const [displayFormat, setDisplayFormat] = React.useState<ColorFormat>(\r\n      availableFormats[0]\r\n    )\r\n\r\n    React.useEffect(() => {\r\n      // Ensure displayFormat is always one of the available formats\r\n      if (!availableFormats.includes(displayFormat)) {\r\n        setDisplayFormat(availableFormats[0])\r\n      }\r\n    }, [availableFormats, displayFormat])\r\n\r\n    const setColorState = React.useCallback(\r\n      (newColor: string) => {\r\n        let processedColor = newColor.toUpperCase()\r\n        processedColor = withAlpha\r\n          ? processedColor\r\n          : toSixDigitHex(processedColor)\r\n        processedColor = hexToRgba(processedColor)\r\n          ? processedColor\r\n          : withAlpha\r\n            ? \"#000000FF\"\r\n            : \"#000000\"\r\n        if (isControlled) {\r\n          controlledOnChange?.(processedColor)\r\n        } else {\r\n          setInternalColor(processedColor)\r\n        }\r\n      },\r\n      [isControlled, controlledOnChange, withAlpha, setInternalColor]\r\n    )\r\n\r\n    const debouncedSetColorState = React.useMemo(\r\n      () => debounce(setColorState, 100),\r\n      [setColorState]\r\n    )\r\n\r\n    const directSetColorState = React.useCallback(\r\n      (newColor: string) => {\r\n        setColorState(newColor)\r\n      },\r\n      [setColorState]\r\n    )\r\n\r\n    const handlePickerChange = (newHex: string) => {\r\n      debouncedSetColorState(newHex)\r\n    }\r\n\r\n    const currentRgba = React.useMemo(\r\n      () => hexToRgba(currentColor) || { r: 0, g: 0, b: 0, a: 1 },\r\n      [currentColor]\r\n    )\r\n    const currentHsla = React.useMemo(\r\n      () => hexToHsla(currentColor) || { h: 0, s: 0, l: 0, a: 1 },\r\n      [currentColor]\r\n    )\r\n\r\n    const handleLocalHexInputChange = (\r\n      e: React.ChangeEvent<HTMLInputElement>\r\n    ) => {\r\n      const userInput = e.target.value\r\n      setLocalHexInput(userInput.toUpperCase())\r\n      const plainHex = userInput.startsWith(\"#\")\r\n        ? userInput.substring(1)\r\n        : userInput\r\n      const targetLength = withAlpha ? 8 : 6\r\n\r\n      if (plainHex.length === targetLength) {\r\n        const parsedRgba = hexToRgba(userInput)\r\n        if (parsedRgba) {\r\n          directSetColorState(\r\n            rgbaToHex(parsedRgba.r, parsedRgba.g, parsedRgba.b, parsedRgba.a)\r\n          )\r\n        }\r\n      }\r\n    }\r\n\r\n    const handleLocalHexInputBlur = () => {\r\n      const parsedRgba = hexToRgba(localHexInput)\r\n      if (parsedRgba) {\r\n        directSetColorState(\r\n          rgbaToHex(parsedRgba.r, parsedRgba.g, parsedRgba.b, parsedRgba.a)\r\n        )\r\n      } else {\r\n        setLocalHexInput(currentColor)\r\n      }\r\n    }\r\n\r\n    const handleRgbChannelChange = (\r\n      channel: keyof RgbaColor,\r\n      value: string\r\n    ) => {\r\n      const numericValue =\r\n        channel === \"a\" ? parseFloat(value) : parseInt(value, 10)\r\n      if (isNaN(numericValue)) return\r\n      let { r, g, b, a } = currentRgba\r\n      if (channel === \"r\") r = Math.min(255, Math.max(0, numericValue))\r\n      else if (channel === \"g\") g = Math.min(255, Math.max(0, numericValue))\r\n      else if (channel === \"b\") b = Math.min(255, Math.max(0, numericValue))\r\n      else if (channel === \"a\" && withAlpha)\r\n        a = Math.min(1, Math.max(0, parseFloat(value)))\r\n      directSetColorState(rgbaToHex(r, g, b, withAlpha ? a : 1))\r\n    }\r\n    const handleHslaChannelChange = (\r\n      channel: keyof HslaColor,\r\n      value: string\r\n    ) => {\r\n      const numericValue =\r\n        channel === \"a\" ? parseFloat(value) : parseInt(value, 10)\r\n      if (isNaN(numericValue)) return\r\n      let { h, s, l, a } = currentHsla\r\n      if (channel === \"h\") h = Math.min(360, Math.max(0, numericValue))\r\n      else if (channel === \"s\") s = Math.min(100, Math.max(0, numericValue))\r\n      else if (channel === \"l\") l = Math.min(100, Math.max(0, numericValue))\r\n      else if (channel === \"a\" && withAlpha)\r\n        a = Math.min(1, Math.max(0, numericValue))\r\n      directSetColorState(hslaToHex(h, s, l, withAlpha ? a : 1))\r\n    }\r\n\r\n    const displayAlphaValue = (withAlpha ? currentRgba.a : 1).toFixed(2)\r\n\r\n    const PickerComponent = withAlpha ? HexAlphaColorPicker : HexColorPicker\r\n\r\n    return (\r\n      <>\r\n        <input type=\"hidden\" name={name} value={currentColor} readOnly />\r\n        <Popover open={isPopoverOpen} onOpenChange={setIsPopoverOpen}>\r\n          <PopoverTrigger className={className} asChild>\r\n            {trigger ? (\r\n              React.isValidElement(trigger) ? (\r\n                React.cloneElement(\r\n                  trigger as React.ReactElement<React.ComponentProps<\"button\">>,\r\n                  {\r\n                    ...triggerProps,\r\n                    style: {\r\n                      ...((\r\n                        trigger as React.ReactElement<{\r\n                          style?: React.CSSProperties\r\n                        }>\r\n                      ).props.style || {}),\r\n                      backgroundColor: withAlpha\r\n                        ? currentColor\r\n                        : toSixDigitHex(currentColor)\r\n                    }\r\n                  }\r\n                )\r\n              ) : (\r\n                trigger\r\n              )\r\n            ) : (\r\n              <DefaultColorPickerTrigger\r\n                colorValue={currentColor}\r\n                {...triggerProps}\r\n              />\r\n            )}\r\n          </PopoverTrigger>\r\n\r\n          <PopoverContent\r\n            ref={ref}\r\n            side={popoverSide}\r\n            align={popoverAlign}\r\n            className=\"w-[19rem] p-4\"\r\n          >\r\n            <div className=\"flex flex-col items-center gap-3\">\r\n              {!!selectorTitle &&\r\n                (typeof selectorTitle === \"string\" ? (\r\n                  <h3 className=\"mb-1 text-lg font-medium text-foreground\">\r\n                    {selectorTitle}\r\n                  </h3>\r\n                ) : (\r\n                  selectorTitle\r\n                ))}\r\n              <PickerComponent\r\n                color={currentColor}\r\n                onChange={handlePickerChange}\r\n                className=\"aspect-square !h-auto !w-full rounded-md border-0 shadow-sm hover:cursor-crosshair\"\r\n              />\r\n              {presetColors && presetColors.length > 0 && (\r\n                <div className=\"w-full pb-1 pt-2\">\r\n                  <div className=\"flex flex-wrap justify-start gap-1.5\">\r\n                    {presetColors.map((color, index) => (\r\n                      <button\r\n                        key={`default-${color}-${index}`}\r\n                        type=\"button\"\r\n                        title={color.toUpperCase()}\r\n                        aria-label={`Select color ${color.toUpperCase()}`}\r\n                        className=\"shadow-xs h-5 w-5 rounded-full border border-gray-300 transition-transform hover:scale-110 focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-1 dark:border-gray-700\"\r\n                        style={{ backgroundColor: toSixDigitHex(color) }}\r\n                        onClick={() => directSetColorState(color)}\r\n                      />\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              )}\r\n              {availableFormats.length > 1 && ( // Only show toggle if there's more than one format enabled\r\n                <ToggleGroup\r\n                  type=\"single\"\r\n                  value={displayFormat}\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  onValueChange={(value: ColorFormat) =>\r\n                    value && setDisplayFormat(value)\r\n                  }\r\n                  className=\"w-full\"\r\n                >\r\n                  {availableFormats.map((format) => (\r\n                    <ToggleGroupItem\r\n                      key={format}\r\n                      value={format}\r\n                      aria-label={format.toUpperCase()}\r\n                      className=\"h-7 w-full\"\r\n                    >\r\n                      {format.toUpperCase()}\r\n                    </ToggleGroupItem>\r\n                  ))}\r\n                </ToggleGroup>\r\n              )}\r\n              <div className=\"grid w-full grid-cols-2 gap-2 pt-1\">\r\n                {displayFormat === \"hex\" && showFormat?.hex && (\r\n                  <>\r\n                    <div className=\"col-span-2 flex items-center gap-2\">\r\n                      <Input\r\n                        id=\"hex-input-field\"\r\n                        value={localHexInput}\r\n                        startAddon={<ColorValueTag valueName=\"HEX\" />}\r\n                        onChange={handleLocalHexInputChange}\r\n                        onBlur={handleLocalHexInputBlur}\r\n                        className=\"h-7 flex-1 text-sm uppercase tracking-wider\"\r\n                        placeholder={withAlpha ? \"#RRGGBBAA\" : \"#RRGGBB\"}\r\n                        autoComplete=\"off\"\r\n                        spellCheck=\"false\"\r\n                      />\r\n                    </div>\r\n                    {withAlpha && (\r\n                      <div className=\"col-span-2 flex items-center gap-2\">\r\n                        <Input\r\n                          id=\"hex-alpha-input\"\r\n                          type=\"number\"\r\n                          min=\"0\"\r\n                          max=\"1\"\r\n                          step=\"0.01\"\r\n                          value={displayAlphaValue}\r\n                          startAddon={<ColorValueTag valueName=\"Alpha\" />}\r\n                          onChange={(e) =>\r\n                            handleRgbChannelChange(\"a\", e.target.value)\r\n                          }\r\n                          className=\"h-7 flex-1 text-sm tracking-wider\"\r\n                        />\r\n                      </div>\r\n                    )}\r\n                  </>\r\n                )}\r\n\r\n                {displayFormat === \"rgb\" && showFormat?.rgb && (\r\n                  <>\r\n                    {([\"r\", \"g\", \"b\"] as const).map((channel) => (\r\n                      <div\r\n                        className=\"flex items-center gap-2\"\r\n                        key={`rgb-${channel}`}\r\n                      >\r\n                        <Input\r\n                          id={`rgb-${channel}-input`}\r\n                          type=\"number\"\r\n                          min=\"0\"\r\n                          max=\"255\"\r\n                          step=\"1\"\r\n                          startAddon={\r\n                            <ColorValueTag valueName={channel.toUpperCase()} />\r\n                          }\r\n                          value={currentRgba[channel]}\r\n                          onChange={(e) =>\r\n                            handleRgbChannelChange(channel, e.target.value)\r\n                          }\r\n                          className=\"h-7 flex-1 text-sm tracking-wider\"\r\n                        />\r\n                      </div>\r\n                    ))}\r\n                    {withAlpha && (\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <Input\r\n                          id=\"rgb-alpha-input\"\r\n                          type=\"number\"\r\n                          min=\"0\"\r\n                          max=\"1\"\r\n                          step=\"0.01\"\r\n                          startAddon={<ColorValueTag valueName=\"Alpha\" />}\r\n                          value={displayAlphaValue}\r\n                          onChange={(e) =>\r\n                            handleRgbChannelChange(\"a\", e.target.value)\r\n                          }\r\n                          className=\"h-7 flex-1 text-sm tracking-wider\"\r\n                        />\r\n                      </div>\r\n                    )}\r\n                  </>\r\n                )}\r\n                {displayFormat === \"hsl\" && showFormat?.hsl && (\r\n                  <>\r\n                    {([\"h\", \"s\", \"l\"] as const).map((channel) => (\r\n                      <div\r\n                        className=\"flex items-center gap-2\"\r\n                        key={`hsl-${channel}`}\r\n                      >\r\n                        <Input\r\n                          id={`hsl-${channel}-input`}\r\n                          type=\"number\"\r\n                          min=\"0\"\r\n                          max={channel === \"h\" ? 360 : 100}\r\n                          step=\"1\"\r\n                          startAddon={\r\n                            <ColorValueTag valueName={channel.toUpperCase()} />\r\n                          }\r\n                          value={currentHsla[channel]}\r\n                          onChange={(e) =>\r\n                            handleHslaChannelChange(channel, e.target.value)\r\n                          }\r\n                          className=\"h-7 flex-1 text-sm tracking-wider\"\r\n                        />\r\n                      </div>\r\n                    ))}\r\n                    {withAlpha && (\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <Input\r\n                          id=\"hsl-alpha-input\"\r\n                          type=\"number\"\r\n                          min=\"0\"\r\n                          max=\"1\"\r\n                          step=\"0.01\"\r\n                          startAddon={<ColorValueTag valueName=\"Alpha\" />}\r\n                          value={displayAlphaValue}\r\n                          onChange={(e) =>\r\n                            handleHslaChannelChange(\"a\", e.target.value)\r\n                          }\r\n                          className=\"h-7 flex-1 text-sm tracking-wider\"\r\n                        />\r\n                      </div>\r\n                    )}\r\n                  </>\r\n                )}\r\n              </div>\r\n              {onAddColor && (\r\n                <Button\r\n                  className=\"mt-2 w-full\"\r\n                  onClick={() => {\r\n                    if (currentColor) onAddColor(currentColor)\r\n                    setIsPopoverOpen(false)\r\n                  }}\r\n                  iconLeft={<Plus />}\r\n                  iconAnimation=\"zoomIn\"\r\n                >\r\n                  Add New Color\r\n                </Button>\r\n              )}\r\n            </div>\r\n          </PopoverContent>\r\n        </Popover>\r\n      </>\r\n    )\r\n  }\r\n)\r\nColorPicker.displayName = \"ColorPicker\"\r\n\r\nexport { ColorPicker, rgbaToHex, hexToRgba, hexToHsla, hslaToHex }\r\nexport type { ColorPickerProps }\r\n",
      "type": "registry:ui"
    }
  ]
}