{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "checkbox",
  "type": "registry:ui",
  "title": "Checkbox",
  "description": "An animated control that toggles between checked and unchecked states.",
  "dependencies": [
    "@radix-ui/react-checkbox"
  ],
  "files": [
    {
      "path": "components/ui/checkbox.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport { Check } from \"lucide-react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\ninterface CheckboxProps {\r\n  /** @default \"default\" */\r\n  // prettier-ignore\r\n  variant?: \"default\" | \"appear\" | \"flip\" | \"impulse\" | \"fill\" | \"draw\"\r\n}\r\n\r\nconst checkboxVariants = cva(\r\n  \"peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default:\r\n          \"data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\r\n        appear: [\r\n          \"transition-colors duration-300\",\r\n          \"data-[state=checked]:shadow-md data-[state=checked]:shadow-primary/30\",\r\n          \"data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\"\r\n        ],\r\n        flip: \"flex items-center justify-center overflow-hidden\",\r\n        impulse: \"flex items-center justify-center overflow-hidden\",\r\n        fill: \"relative overflow-hidden\",\r\n        draw: [\r\n          \"transition-colors duration-100\",\r\n          \"data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\"\r\n        ]\r\n      }\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\"\r\n    }\r\n  }\r\n)\r\n\r\nconst checkIconVariants = cva(\"h-4 w-4\", {\r\n  variants: {\r\n    variant: {\r\n      default: \"\",\r\n      appear: [\r\n        \"animate-check-appear\",\r\n        \"opacity-0 scale-50 data-[state=checked]:opacity-100 data-[state=checked]:scale-100\"\r\n      ],\r\n      flip: \"data-[state=checked]:animate-check-flip data-[state=unchecked]:animate-check-unflip bg-primary text-primary-foreground\",\r\n      impulse: \"animate-check-impulse bg-primary text-primary-foreground\",\r\n      fill: \"data-[state=checked]:animate-check-fill data-[state=unchecked]:animate-check-unfill\",\r\n      draw: [\r\n        \"stroke-[2] [stroke-linecap:round] [stroke-linejoin:round]\",\r\n        \"[stroke-dasharray:24] [stroke-dashoffset:-24]\",\r\n        \"group-data-[state=checked]:animate-check-draw\",\r\n        \"group-data-[state=unchecked]:animate-check-erase\",\r\n        \"transition-[stroke-dashoffset] duration-300 ease-out\"\r\n      ]\r\n    }\r\n  },\r\n  defaultVariants: {\r\n    variant: \"default\"\r\n  }\r\n})\r\n\r\nconst Checkbox = React.forwardRef<\r\n  React.ComponentRef<typeof CheckboxPrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root> & CheckboxProps\r\n>(({ className, variant = \"default\", ...props }, ref) => (\r\n  <CheckboxPrimitive.Root\r\n    ref={ref}\r\n    className={cn(\"group\", checkboxVariants({ variant, className }))}\r\n    {...props}\r\n  >\r\n    <CheckboxPrimitive.Indicator asChild>\r\n      {variant === \"fill\" ? (\r\n        <div\r\n          className={cn(checkIconVariants({ variant }), \"size-9 bg-primary\")}\r\n        />\r\n      ) : (\r\n        <Check className={checkIconVariants({ variant })} />\r\n      )}\r\n    </CheckboxPrimitive.Indicator>\r\n  </CheckboxPrimitive.Root>\r\n))\r\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\r\n\r\nexport { Checkbox }\r\nexport type { CheckboxProps }\r\n",
      "type": "registry:ui"
    }
  ],
  "tailwind": {
    "config": {
      "theme": {
        "extend": {
          "keyframes": {
            "check-appear": {
              "0%": {
                "height": "0",
                "transform": "translateY(-100%)"
              },
              "100%": {
                "height": "100%",
                "transform": "translateY(0)"
              }
            },
            "check-flip": {
              "0%": {
                "transform": "rotateY(90deg)"
              },
              "100%": {
                "transform": "rotateY(0)"
              }
            },
            "check-unflip": {
              "0%": {
                "transform": "rotateY(0)"
              },
              "100%": {
                "transform": "rotateY(90deg)"
              }
            },
            "check-impulse": {
              "0%": {
                "opacity": "0",
                "transform": "scale(0)",
                "transition": "all 0.5s cubic-bezier(0.25, 0.1, 0.25, 1.5)"
              },
              "100%": {
                "opacity": "1",
                "transform": "scale(1.3)"
              }
            },
            "check-fill": {
              "0%": {
                "position": "absolute",
                "transform": "rotateZ(45deg)",
                "top": "-52px",
                "left": "-52px"
              },
              "100%": {
                "position": "absolute",
                "transform": "rotateZ(-90deg)",
                "top": "-10px",
                "left": "-10px"
              }
            },
            "check-unfill": {
              "0%": {
                "position": "absolute",
                "transform": "rotateZ(-90deg)",
                "top": "-10px",
                "left": "-10px"
              },
              "100%": {
                "position": "absolute",
                "transform": "rotateZ(45deg)",
                "top": "-52px",
                "left": "-52px"
              }
            },
            "check-draw": {
              "0%": {
                "stroke-dashoffset": "-24"
              },
              "100%": {
                "stroke-dashoffset": "0"
              }
            },
            "check-erase": {
              "0%": {
                "stroke-dashoffset": "0"
              },
              "100%": {
                "stroke-dashoffset": "-24"
              }
            }
          },
          "animation": {
            "check-appear": "check-appear 0.2s ease-out forwards",
            "check-flip": "check-flip 0.3s ease-out",
            "check-unflip": "check-unflip 0.1s",
            "check-impulse": "check-impulse 0.3s",
            "check-fill": "check-fill 0.25s ease-in",
            "check-unfill": "check-unfill 0.3s ease-out",
            "check-draw": "check-draw 0.3s ease-out forwards",
            "check-erase": "check-erase 0.2s ease-in forwards"
          }
        }
      }
    }
  }
}