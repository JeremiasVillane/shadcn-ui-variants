{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "breadcrumb",
  "type": "registry:ui",
  "title": "Breadcrumb",
  "description": "Breadcrumb component with variants, different styles and separators.",
  "files": [
    {
      "path": "components/ui/breadcrumb.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, ChevronsRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Badge } from \"@/components/ui/badge\"\n\ninterface BreadcrumbProps extends React.ComponentPropsWithoutRef<\"nav\"> {\n  /** @default \"default\" */\n  // prettier-ignore\n  variant?: \"default\" | \"contained\" | \"badge-active\" | \"badge-outline\" | \"badge-fill\"\n  /** @default \"default\" */\n  separatorVariant?: \"default\" | \"slash\" | \"dot\" | \"chevrons\" | \"step\"\n}\n\ninterface BreadcrumbContextValue {\n  separatorVariant: BreadcrumbProps[\"separatorVariant\"]\n  contained: boolean\n  badgeActive: boolean\n  badgeFill: boolean\n  badgeOutline: boolean\n}\n\nconst BreadcrumbContext = React.createContext<BreadcrumbContextValue>({\n  separatorVariant: \"default\",\n  contained: false,\n  badgeActive: false,\n  badgeFill: false,\n  badgeOutline: false\n})\n\nconst Breadcrumb = React.forwardRef<HTMLElement, BreadcrumbProps>(\n  (\n    { separatorVariant = \"default\", variant = \"default\", className, ...props },\n    ref\n  ) => {\n    const contained = variant === \"contained\"\n    const badgeActive = variant === \"badge-active\"\n    const badgeFill = variant === \"badge-fill\"\n    const badgeOutline = variant === \"badge-outline\"\n\n    const contextValue: BreadcrumbContextValue = {\n      separatorVariant,\n      contained,\n      badgeActive,\n      badgeFill,\n      badgeOutline\n    }\n\n    return (\n      <BreadcrumbContext.Provider value={contextValue}>\n        <nav\n          ref={ref}\n          aria-label=\"breadcrumb\"\n          className={cn(\n            contained && \"rounded-lg bg-secondary px-3 py-1.5\",\n            className\n          )}\n          {...props}\n        />\n      </BreadcrumbContext.Provider>\n    )\n  }\n)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & { asChild?: boolean }\n>(({ asChild, className, children, ...props }, ref) => {\n  const { badgeFill, badgeOutline } = React.useContext(BreadcrumbContext)\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    >\n      {badgeFill ? (\n        <Badge\n          variant=\"secondary\"\n          className=\"rounded-full font-medium shadow-none\"\n        >\n          {children}\n        </Badge>\n      ) : badgeOutline ? (\n        <Badge\n          variant=\"outline\"\n          className=\"rounded-full font-medium shadow-none\"\n        >\n          {children}\n        </Badge>\n      ) : (\n        children\n      )}\n    </Comp>\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, children, ...props }, ref) => {\n  const { badgeActive, badgeOutline, badgeFill } =\n    React.useContext(BreadcrumbContext)\n  const content =\n    badgeActive || badgeOutline || badgeFill ? (\n      <Badge className=\"rounded-full shadow-none\">{children}</Badge>\n    ) : (\n      children\n    )\n\n  return (\n    <span\n      ref={ref}\n      role=\"link\"\n      aria-disabled=\"true\"\n      aria-current=\"page\"\n      className={cn(\"font-normal text-foreground\", className)}\n      {...props}\n    >\n      {content}\n    </span>\n  )\n})\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => {\n  const { separatorVariant } = React.useContext(BreadcrumbContext)\n  let separatorContent: React.ReactNode\n\n  if (children) {\n    separatorContent = children\n  } else {\n    switch (separatorVariant) {\n      case \"slash\":\n        separatorContent = \" / \"\n        break\n      case \"dot\":\n        separatorContent = \" â€¢ \"\n        break\n      case \"chevrons\":\n        separatorContent = <ChevronsRight />\n        break\n      case \"step\":\n        separatorContent = (\n          <svg\n            width=\"40\"\n            height=\"2\"\n            role=\"presentation\"\n            aria-hidden=\"true\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <rect width=\"40\" height=\"2\" fill=\"currentColor\" />\n          </svg>\n        )\n        break\n      default:\n        separatorContent = <ChevronRight />\n        break\n    }\n  }\n\n  return (\n    <li\n      role=\"presentation\"\n      aria-hidden=\"true\"\n      className={cn(\n        \"[&>svg]:h-3.5 [&>svg]:w-3.5\",\n        separatorVariant === \"step\" ? \"[&>svg]:w-5.5 [&>svg]:h-full\" : \"\",\n        className\n      )}\n      {...props}\n    >\n      {separatorContent}\n    </li>\n  )\n}\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbEllipsis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis\n}\nexport type { BreadcrumbProps }\n",
      "type": "registry:ui"
    }
  ]
}