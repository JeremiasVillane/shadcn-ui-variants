{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button",
  "type": "registry:ui",
  "title": "Button",
  "description": "A supercharged button component with additional variants, animations, extensions and auxiliar subcomponents.",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "files": [
    {
      "path": "components/ui/button.tsx",
      "content": "import * as React from \"react\"\r\nimport { Slot, Slottable } from \"@radix-ui/react-slot\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport { Loader2 } from \"lucide-react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\ninterface ButtonProps extends BaseButtonProps {\r\n  /** @default \"default\" */\r\n  // prettier-ignore\r\n  variant?: \"default\" | \"destructive\" | \"success\" | \"warning\" | \"outline\" | \"secondary\" | \"ghost\" | \"link\"\r\n  /** @default \"default\" */\r\n  size?: \"default\" | \"sm\" | \"xs\" | \"lg\" | \"icon\"\r\n  /**\r\n   * Indicates if the button is in a loading state. When true, it disables the button and shows a loading spinner, replacing the left icon if present, or prepending it otherwise.\r\n   * @default false */\r\n  isLoading?: boolean\r\n  /** @default false */\r\n  disabled?: boolean\r\n  /** Element to display as an icon to the left of the button's content. Will be replaced by a loading spinner if `isLoading` is true. */\r\n  iconLeft?: React.ReactElement\r\n  /** Element to display as an icon to the right of the button's content. */\r\n  iconRight?: React.ReactElement\r\n  /**\r\n   * Specifies the type of animation to apply to the icon(s) on hover, based on `iconAnimationTarget`.\r\n   * @default \"none\" */\r\n  // prettier-ignore\r\n  iconAnimation?: \"none\" | \"translateXRight\" | \"translateXLeft\" | \"translateYUp\" | \"translateYDown\" | \"spinLeft\" | \"spinRight\" | \"spinUp\" | \"spinDown\" | \"zoomIn\" | \"zoomOut\" | \"bounce\" | \"ping\" | \"pulse\" | \"spin\"\r\n  /**\r\n   * Determines which icon(s) the `iconAnimation` should target. 'left' targets `iconLeft`, 'right' targets `iconRight`, 'both' targets both, and 'none' applies no animation.\r\n   * @default \"none\" */\r\n  iconAnimationTarget?: \"right\" | \"left\" | \"both\" | \"none\"\r\n}\r\n\r\nconst buttonVariants = cva(\r\n  \"group inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 active:opacity-95\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\r\n        destructive:\r\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\r\n        success:\r\n          \"bg-emerald-500 dark:bg-emerald-600 text-white hover:bg-emerald-500/90 dark:hover:bg-emerald-600/90\",\r\n        warning:\r\n          \"bg-amber-500 dark:bg-amber-600 text-white hover:bg-amber-500/90 dark:hover:bg-amber-600/90\",\r\n        outline:\r\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\r\n        secondary:\r\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\r\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\r\n        link: \"text-primary underline-offset-4 hover:underline h-auto px-0 py-0\"\r\n      },\r\n      size: {\r\n        default: \"h-10 px-4 py-2\",\r\n        sm: \"h-9 rounded-md px-3\",\r\n        xs: \"h-6 rounded-md px-1.5 text-xs\",\r\n        lg: \"h-11 rounded-md px-8\",\r\n        icon: \"h-9 w-9\"\r\n      }\r\n    },\r\n    defaultVariants: { variant: \"default\", size: \"default\" }\r\n  }\r\n)\r\n\r\nconst groupSegmentVariants = cva(\"relative focus-visible:z-10 rounded-none\", {\r\n  variants: {\r\n    isFirst: { true: \"rounded-l-md\" },\r\n    isLast: { true: \"rounded-r-md\" },\r\n    isOutlineGroup: { true: \"\", false: \"\" }\r\n  },\r\n  compoundVariants: [\r\n    // Add divider ONLY if NOT outline AND NOT the first segment\r\n    {\r\n      isFirst: false,\r\n      isOutlineGroup: false,\r\n      className: \"border-l border-border\"\r\n    },\r\n    // Add negative margin overlap ONLY IF outline AND NOT the first segment\r\n    {\r\n      isFirst: false,\r\n      isOutlineGroup: true,\r\n      className: \"-ml-px\"\r\n    }\r\n  ]\r\n})\r\n\r\nconst animationClasses = {\r\n  none: \"\",\r\n  translateXRight: \"transition-transform group-hover:translate-x-0.5\",\r\n  translateXLeft: \"transition-transform group-hover:-translate-x-0.5\",\r\n  translateYUp: \"transition-transform group-hover:-translate-y-0.5\",\r\n  translateYDown: \"transition-transform group-hover:translate-y-0.5\",\r\n  spinLeft: \"transition-transform group-hover:-rotate-45\",\r\n  spinRight: \"transition-transform group-hover:rotate-45\",\r\n  spinUp: \"transition-transform group-hover:-rotate-90\",\r\n  spinDown: \"transition-transform group-hover:rotate-90\",\r\n  zoomIn: \"transition-transform group-hover:scale-105\",\r\n  zoomOut: \"transition-transform group-hover:scale-95\",\r\n  bounce: \"transition-transform group-hover:animate-bounce\",\r\n  ping: \"transition-transform group-hover:animate-ping\",\r\n  pulse: \"transition-transform group-hover:animate-pulse opacity-90\",\r\n  spin: \"transition-transform group-hover:animate-spin\"\r\n}\r\n\r\ntype BaseButtonProps = React.ButtonHTMLAttributes<HTMLButtonElement> & {\r\n  asChild?: boolean\r\n}\r\n\r\nconst createInsetButton = (name: string) => {\r\n  const Component: React.FC<BaseButtonProps> = () => null\r\n  Component.displayName = name\r\n  return Component\r\n}\r\n\r\nconst LeftInsetButton = createInsetButton(\"LeftInsetButton\")\r\nconst RightInsetButton = createInsetButton(\"RightInsetButton\")\r\n\r\nconst isInsetButton = (component: React.FC, node: React.ReactNode) =>\r\n  React.isValidElement(node) &&\r\n  typeof node.type !== \"string\" &&\r\n  (node.type as React.FC).displayName === component.displayName\r\n\r\nconst Button = React.forwardRef<\r\n  HTMLButtonElement | HTMLDivElement,\r\n  ButtonProps\r\n>(\r\n  (\r\n    {\r\n      className,\r\n      variant,\r\n      size,\r\n      asChild = false,\r\n      isLoading = false,\r\n      iconLeft,\r\n      iconRight,\r\n      iconAnimation = \"none\",\r\n      iconAnimationTarget = \"none\",\r\n      children,\r\n      disabled,\r\n      ...props\r\n    },\r\n    ref\r\n  ) => {\r\n    const [leftInset, rightInset, centerChildren] = (() => {\r\n      const left: React.ReactElement<BaseButtonProps>[] = []\r\n      const right: React.ReactElement<BaseButtonProps>[] = []\r\n      const center: React.ReactNode[] = []\r\n\r\n      React.Children.forEach(children, (child) => {\r\n        if (\r\n          React.isValidElement(child) &&\r\n          isInsetButton(LeftInsetButton, child)\r\n        )\r\n          left.push(child as React.ReactElement<BaseButtonProps>)\r\n        else if (\r\n          React.isValidElement(child) &&\r\n          isInsetButton(RightInsetButton, child)\r\n        )\r\n          right.push(child as React.ReactElement<BaseButtonProps>)\r\n        else center.push(child)\r\n      })\r\n\r\n      return [left[0], right[0], center]\r\n    })()\r\n\r\n    const isGroup = !!leftInset || !!rightInset\r\n    const isDisabled = isLoading || disabled\r\n    const animationClass =\r\n      iconAnimation !== \"none\" ? animationClasses[iconAnimation] : \"\"\r\n    const shouldAnimate = (side: \"left\" | \"right\") =>\r\n      [side, \"both\"].includes(iconAnimationTarget) ||\r\n      !(!!iconLeft && !!iconRight)\r\n\r\n    const renderIcon = (\r\n      icon: React.ReactElement<any, any> | undefined,\r\n      side: \"left\" | \"right\"\r\n    ) =>\r\n      icon &&\r\n      React.cloneElement(icon, {\r\n        className: cn(\r\n          \"shrink-0 opacity-60\",\r\n          icon.props.className,\r\n          shouldAnimate(side) && animationClass\r\n        )\r\n      })\r\n\r\n    if (isGroup) {\r\n      const isOutline = variant === \"outline\"\r\n      const hasCenter = centerChildren.length > 0\r\n\r\n      const renderSegment = (\r\n        segmentProps: BaseButtonProps & { className?: string },\r\n        segmentConfig: {\r\n          isFirst: boolean\r\n          isLast: boolean\r\n          isOutlineGroup: boolean\r\n          content: React.ReactNode\r\n        }\r\n      ) => {\r\n        const { isFirst, isLast, isOutlineGroup, content } = segmentConfig\r\n        const {\r\n          asChild: segmentAsChild,\r\n          disabled: segmentDisabled,\r\n          ...restSegmentProps\r\n        } = segmentProps\r\n        const Comp = segmentAsChild ? Slot : \"button\"\r\n        const finalDisabled = segmentDisabled ?? isDisabled\r\n\r\n        return React.createElement(\r\n          Comp,\r\n          {\r\n            type: \"button\",\r\n            ...restSegmentProps,\r\n            ...(!segmentAsChild && { disabled: finalDisabled }),\r\n            className: cn(\r\n              buttonVariants({ variant, size }),\r\n              groupSegmentVariants({ isFirst, isLast, isOutlineGroup }),\r\n              restSegmentProps.className\r\n            )\r\n          },\r\n          content\r\n        )\r\n      }\r\n\r\n      return (\r\n        <div\r\n          className={cn(\r\n            \"inline-flex items-stretch overflow-hidden rounded-md shadow-sm\",\r\n            className\r\n          )}\r\n          ref={ref as React.Ref<HTMLDivElement>}\r\n          role=\"group\"\r\n        >\r\n          {leftInset &&\r\n            renderSegment(leftInset.props, {\r\n              isFirst: true,\r\n              isLast: !hasCenter && !rightInset,\r\n              isOutlineGroup: isOutline,\r\n              content: leftInset.props.children\r\n            })}\r\n          {hasCenter &&\r\n            renderSegment(props, {\r\n              isFirst: !leftInset,\r\n              isLast: !rightInset,\r\n              isOutlineGroup: isOutline,\r\n              content: (\r\n                <>\r\n                  {isLoading && (\r\n                    <Loader2 className=\"size-4 shrink-0 animate-spin\" />\r\n                  )}\r\n                  {!isLoading && renderIcon(iconLeft, \"left\")}\r\n                  <Slottable>{centerChildren}</Slottable>\r\n                  {renderIcon(iconRight, \"right\")}\r\n                </>\r\n              )\r\n            })}\r\n          {rightInset &&\r\n            renderSegment(rightInset.props, {\r\n              isFirst: !leftInset && !hasCenter,\r\n              isLast: true,\r\n              isOutlineGroup: isOutline,\r\n              content: rightInset.props.children\r\n            })}\r\n        </div>\r\n      )\r\n    }\r\n\r\n    const Comp: React.ElementType = asChild ? Slot : \"button\"\r\n    const shouldShowIcons = variant !== \"link\" && size !== \"icon\"\r\n    const loader = isLoading && (\r\n      <Loader2 className=\"size-4 shrink-0 animate-spin\" />\r\n    )\r\n\r\n    return (\r\n      <Comp\r\n        className={cn(buttonVariants({ variant, size }), className)}\r\n        ref={ref as React.Ref<HTMLButtonElement>}\r\n        disabled={isDisabled}\r\n        {...props}\r\n      >\r\n        {shouldShowIcons && (isLoading ? loader : renderIcon(iconLeft, \"left\"))}\r\n        <Slottable>{children}</Slottable>\r\n        {shouldShowIcons && renderIcon(iconRight, \"right\")}\r\n      </Comp>\r\n    )\r\n  }\r\n)\r\nButton.displayName = \"Button\"\r\n\r\nexport { Button, buttonVariants, LeftInsetButton, RightInsetButton }\r\nexport type { ButtonProps, BaseButtonProps as InsetButtonProps }\r\n",
      "type": "registry:ui"
    }
  ]
}