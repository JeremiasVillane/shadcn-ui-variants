{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "list",
  "type": "registry:ui",
  "title": "List",
  "description": "Displays a list of items with various styles and layouts.",
  "files": [
    {
      "path": "components/ui/list.tsx",
      "content": "import * as React from \"react\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\ninterface ListItemProps extends React.LiHTMLAttributes<HTMLLIElement> {\r\n  /**\r\n   * Optional icon to display as a marker. It has priority over the List icon.\r\n   */\r\n  icon?: React.ReactNode\r\n  /**\r\n   * Contents of the list item.\r\n   */\r\n  children: React.ReactNode\r\n}\r\n\r\nconst ListItem = React.forwardRef<HTMLLIElement, ListItemProps>(\r\n  ({ className, children, icon, ...props }, ref) => {\r\n    const hasIcon = icon != null\r\n    const paddingClass = hasIcon ? \"pl-6\" : \"\"\r\n\r\n    return (\r\n      <li\r\n        ref={ref}\r\n        className={cn(\"relative\", paddingClass, className)}\r\n        data-list-item-host=\"true\"\r\n        {...props}\r\n      >\r\n        {hasIcon && (\r\n          <span\r\n            className=\"absolute left-0 top-[0.2em] flex h-5 w-5 items-center justify-center\"\r\n            aria-hidden=\"true\"\r\n          >\r\n            {icon}\r\n          </span>\r\n        )}\r\n        {children}\r\n      </li>\r\n    )\r\n  }\r\n)\r\nListItem.displayName = \"ListItem\"\r\n;(ListItem as any).__IS_LIST_ITEM = true\r\n\r\nconst listVariants = cva(\"text-base text-foreground my-2\", {\r\n  variants: {\r\n    variant: {\r\n      default: \"list-disc list-outside [&>li]:pl-1.5 ml-5\",\r\n      numbered: \"list-decimal list-outside [&>li]:pl-2.5 ml-5\",\r\n      \"upper-alpha\": \"list-[upper-alpha] list-outside [&>li]:pl-2.5 ml-5\",\r\n      \"lower-alpha\": \"list-[lower-alpha] list-outside [&>li]:pl-2.5 ml-5\",\r\n      \"upper-roman\": \"list-[upper-roman] list-outside [&>li]:pl-2.5 ml-5\",\r\n      \"lower-roman\": \"list-[lower-roman] list-outside [&>li]:pl-2.5 ml-5\",\r\n      arrow:\r\n        \"list-none [&>li]:relative [&>li]:pl-6 [&>li]:before:absolute [&>li]:before:left-0 [&>li]:before:top-0 [&>li]:before:content-['⮞'] [&>li]:before:text-foreground/80\",\r\n      bullet:\r\n        \"list-none [&>li]:relative [&>li]:pl-6 [&>li]:before:absolute [&>li]:before:left-0 [&>li]:before:-top-1 [&>li]:before:content-['•'] [&>li]:before:text-foreground/80 [&>li]:before:text-2xl\",\r\n      \"bullet-outline\":\r\n        \"list-none [&>li]:relative [&>li]:pl-6 [&>li]:before:absolute [&>li]:before:left-0 [&>li]:before:-top-1 [&>li]:before:content-['◦'] [&>li]:before:text-foreground/80 [&>li]:before:text-2xl\",\r\n      triangle:\r\n        \"list-none [&>li]:relative [&>li]:pl-6 [&>li]:before:absolute [&>li]:before:left-0 [&>li]:before:-top-1.5 [&>li]:before:content-['‣'] [&>li]:before:text-foreground/80 [&>li]:before:text-3xl\",\r\n      square:\r\n        \"list-none [&>li]:relative [&>li]:pl-6 [&>li]:before:absolute [&>li]:before:left-0 [&>li]:before:top-0 [&>li]:before:content-['▪'] [&>li]:before:text-foreground/80\",\r\n      dash: \"list-none [&>li]:relative [&>li]:pl-6 [&>li]:before:absolute [&>li]:before:left-0 [&>li]:before:top-0 [&>li]:before:content-['-'] [&>li]:before:text-foreground/80\",\r\n      check:\r\n        \"list-none [&>li]:relative [&>li]:pl-6 [&>li]:before:absolute [&>li]:before:left-0 [&>li]:before:top-0 [&>li]:before:content-['✓'] [&>li]:before:text-primary\",\r\n      x: \"list-none [&>li]:relative [&>li]:pl-6 [&>li]:before:absolute [&>li]:before:left-0 [&>li]:before:top-0 [&>li]:before:content-['✗'] [&>li]:before:text-primary\",\r\n      none: \"list-none p-0\"\r\n    },\r\n    spacing: {\r\n      default: \"[&>li]:mb-1.5\",\r\n      tight: \"[&>li]:mb-0.5\",\r\n      relaxed: \"[&>li]:mb-2\",\r\n      loose: \"[&>li]:mb-3\",\r\n      none: \"[&>li]:mb-0\"\r\n    }\r\n  },\r\n  defaultVariants: {\r\n    variant: \"default\",\r\n    spacing: \"default\"\r\n  },\r\n  compoundVariants: [{ variant: \"none\", className: \"my-0\" }]\r\n})\r\n\r\ninterface ListProps\r\n  extends React.HTMLAttributes<HTMLUListElement | HTMLOListElement>,\r\n    VariantProps<typeof listVariants> {\r\n  /**\r\n   * Optional icon to use as a marker for ALL child ListItems.\r\n   * A child ListItem can override this icon by defining its own ‘icon’ prop.\r\n   */\r\n  icon?: React.ReactNode\r\n  /** @default \"default\" */\r\n  // prettier-ignore\r\n  variant?: \"default\" | \"numbered\" | \"upper-alpha\" | \"lower-alpha\" | \"upper-roman\" | \"lower-roman\" | \"arrow\" | \"bullet\" | \"bullet-outline\" | \"triangle\" | \"square\" | \"dash\" | \"check\" | \"x\" | \"none\"\r\n  /** @default \"default\" */\r\n  spacing?: \"default\" | \"tight\" | \"relaxed\" | \"loose\" | \"none\"\r\n  /**\r\n   * Child elements of the list. **Expected to be `<ListItem>` components.**\r\n   * Other types of children will be filtered out.\r\n   */\r\n  children?: React.ReactNode\r\n}\r\n\r\nconst List = React.forwardRef<HTMLUListElement | HTMLOListElement, ListProps>(\r\n  ({ className, variant, spacing, icon, children, ...props }, ref) => {\r\n    const ListComponent =\r\n      !!variant &&\r\n      [\r\n        \"numbered\",\r\n        \"upper-alpha\",\r\n        \"lower-alpha\",\r\n        \"upper-roman\",\r\n        \"lower-roman\"\r\n      ].includes(variant)\r\n        ? \"ol\"\r\n        : \"ul\"\r\n    const hasCustomIcon = icon != null\r\n    const effectiveVariant = hasCustomIcon ? \"none\" : variant\r\n\r\n    const processedChildren = React.Children.map(children, (child) => {\r\n      if (\r\n        React.isValidElement<ListItemProps>(child) &&\r\n        (child.type as any)?.__IS_LIST_ITEM === true\r\n      ) {\r\n        return React.cloneElement(child, {\r\n          icon: child.props.icon ?? icon\r\n        })\r\n      }\r\n\r\n      if (child != null && child !== false && typeof child !== \"boolean\") {\r\n        if (!React.isValidElement(child)) {\r\n          console.warn(\r\n            \"List component received a direct child that is not a ListItem component. It will be ignored:\",\r\n            child\r\n          )\r\n        } else if (!(child.type as any)?.__IS_LIST_ITEM) {\r\n          console.warn(\r\n            \"List component received a direct child of an invalid type. Only <ListItem> components are rendered. It will be ignored.\"\r\n          )\r\n        }\r\n      }\r\n\r\n      return null\r\n    })\r\n\r\n    return (\r\n      <ListComponent\r\n        ref={ref as any}\r\n        className={cn(\r\n          listVariants({ variant: effectiveVariant, spacing }),\r\n          \"[li[data-list-item-host=true]>_&]:my-1.5\",\r\n          className\r\n        )}\r\n        {...props}\r\n      >\r\n        {processedChildren}\r\n      </ListComponent>\r\n    )\r\n  }\r\n)\r\nList.displayName = \"List\"\r\n\r\nexport { List, ListItem, listVariants }\r\nexport type { ListProps, ListItemProps }\r\n",
      "type": "registry:ui"
    }
  ]
}