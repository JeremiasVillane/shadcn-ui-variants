{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "auto-toc",
  "type": "registry:ui",
  "title": "Auto Table of Contents",
  "description": "This component automatically scans your page content for heading elements and builds a dynamic table of contents without requiring manual input.",
  "files": [
    {
      "path": "components/ui/auto-toc.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { AlignLeft } from \"lucide-react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\nimport { useUrlChange } from \"@/hooks/use-url-change\"\r\n\r\ninterface TOCItem {\r\n  id: string\r\n  text: string\r\n  level: number\r\n}\r\n\r\ninterface AutoTableOfContentsProps {\r\n  /** The CSS selector for the container element containing headings.\r\n   * @default \"main\" */\r\n  containerSelector?: string\r\n\r\n  /** The title displayed above the table of contents.\r\n   * @default \"Table of Contents\" */\r\n  title?: string\r\n\r\n  /** Maximum depth of heading levels to include in the table of contents.\r\n   * @default 3 */\r\n  maxDepth?: number\r\n\r\n  /** Minimum number of headings required to display the table of contents.\r\n   * @default 2 */\r\n  minHeadings?: number\r\n\r\n  /** Additional CSS classes for the navigation container. */\r\n  className?: string\r\n\r\n  /** Flag to auto-generate IDs for headings without an existing ID.\r\n   * @default false */\r\n  autoGenerateIds?: boolean\r\n\r\n  /** Offset for scrolling to headings. Useful for sticky headers.\r\n   * @default 100 */\r\n  offset?: number\r\n}\r\n\r\nfunction AutoTableOfContents({\r\n  containerSelector = \"main\",\r\n  title = \"Table of Contents\",\r\n  maxDepth = 3,\r\n  minHeadings = 2,\r\n  className,\r\n  autoGenerateIds = false,\r\n  offset = 100\r\n}: AutoTableOfContentsProps) {\r\n  const [headings, setHeadings] = React.useState<TOCItem[]>([])\r\n  const [activeId, setActiveId] = React.useState<string>(\"\")\r\n  const observersRef = React.useRef<IntersectionObserver[]>([])\r\n\r\n  // Track URL changes to remount/update when navigation occurs\r\n  const currentUrl = useUrlChange()\r\n\r\n  // Extract headings from the DOM\r\n  React.useEffect(() => {\r\n    // Clear previous active ID when the current page changes\r\n    !currentUrl.includes(\"#\") && setActiveId(\"\")\r\n\r\n    // Clean up any existing observers\r\n    if (observersRef.current.length > 0) {\r\n      observersRef.current.forEach((observer) => observer.disconnect())\r\n      observersRef.current = []\r\n    }\r\n\r\n    // Wait a bit for the DOM to be fully updated after route changes\r\n    const timeoutId = setTimeout(() => {\r\n      const container = document.querySelector(containerSelector)\r\n      if (!container) return\r\n\r\n      const headingElements = container.querySelectorAll(\r\n        \"h1, h2, h3, h4, h5, h6\"\r\n      )\r\n\r\n      const extractedHeadings: TOCItem[] = []\r\n\r\n      headingElements.forEach((heading) => {\r\n        const level = Number.parseInt(heading.tagName.substring(1))\r\n\r\n        // Skip headings deeper than maxDepth\r\n        if (level > maxDepth) return\r\n\r\n        let id = heading.id\r\n\r\n        // If heading doesn't have an ID\r\n        if (!id) {\r\n          // Only generate an ID if autoGenerateIds is true\r\n          if (autoGenerateIds) {\r\n            id =\r\n              heading.textContent\r\n                ?.trim()\r\n                .toLowerCase()\r\n                .replace(/\\s+/g, \"-\")\r\n                .replace(/[^\\w-]/g, \"\") || `heading-${extractedHeadings.length}`\r\n            heading.id = id\r\n          } else {\r\n            return\r\n          }\r\n        }\r\n\r\n        extractedHeadings.push({\r\n          id,\r\n          text: heading.textContent?.trim() || \"\",\r\n          level\r\n        })\r\n      })\r\n\r\n      if (extractedHeadings.length >= minHeadings) {\r\n        setHeadings(extractedHeadings)\r\n        setupObservers(extractedHeadings)\r\n      } else {\r\n        setHeadings([])\r\n      }\r\n    }, 100)\r\n\r\n    return () => {\r\n      clearTimeout(timeoutId)\r\n      observersRef.current.forEach((observer) => observer.disconnect())\r\n      observersRef.current = []\r\n    }\r\n  }, [containerSelector, maxDepth, minHeadings, autoGenerateIds, currentUrl])\r\n\r\n  const setupObservers = (headings: TOCItem[]) => {\r\n    if (typeof IntersectionObserver === \"undefined\") {\r\n      return\r\n    }\r\n\r\n    headings.forEach((heading) => {\r\n      const element = document.getElementById(heading.id)\r\n\r\n      if (element) {\r\n        const observer = new IntersectionObserver(\r\n          (entries) => {\r\n            entries.forEach((entry) => {\r\n              if (entry.isIntersecting) {\r\n                setActiveId(heading.id)\r\n              }\r\n            })\r\n          },\r\n          {\r\n            rootMargin: \"0px 0px -80% 0px\",\r\n            threshold: 0.1\r\n          }\r\n        )\r\n\r\n        observer.observe(element)\r\n        observersRef.current.push(observer)\r\n      }\r\n    })\r\n  }\r\n\r\n  const handleClick = (e: React.MouseEvent<HTMLAnchorElement>, id: string) => {\r\n    e.preventDefault()\r\n\r\n    const element = document.getElementById(id)\r\n\r\n    if (element) {\r\n      window.scrollTo({\r\n        top: element.offsetTop - offset,\r\n        behavior: \"smooth\"\r\n      })\r\n\r\n      // Update URL hash without scrolling\r\n      window.history.pushState(null, \"\", `#${id}`)\r\n    }\r\n  }\r\n\r\n  if (headings.length < minHeadings) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <nav className={cn(\"w-full max-w-xs\", className)}>\r\n      {title && (\r\n        <h3 className=\"-ms-0.5 inline-flex items-center gap-1.5 text-sm text-muted-foreground\">\r\n          <AlignLeft className=\"size-4\" />\r\n          {title}\r\n        </h3>\r\n      )}\r\n      <ul className=\"ms-2 space-y-1\">\r\n        {headings.map((heading) => {\r\n          const isActive = activeId === heading.id\r\n          const indentLevel = Math.max(0, heading.level - 1)\r\n\r\n          return (\r\n            <li\r\n              key={heading.id}\r\n              className=\"transition-all duration-200\"\r\n              style={{\r\n                marginLeft: indentLevel > 1 ? `${(indentLevel - 1) * 9}px` : 0\r\n              }}\r\n            >\r\n              <a\r\n                href={`#${heading.id}`}\r\n                onClick={(e) => handleClick(e, heading.id)}\r\n                className={cn(\r\n                  \"relative block rounded-sm px-3 py-1 text-sm transition-colors\",\r\n                  isActive\r\n                    ? \"bg-primary/10 font-medium text-primary\"\r\n                    : \"text-foreground/80 hover:bg-muted hover:text-foreground\"\r\n                )}\r\n                aria-current={isActive ? \"location\" : undefined}\r\n              >\r\n                {isActive && (\r\n                  <span\r\n                    className=\"absolute bottom-0 left-0 top-0 w-0.5 rounded-full bg-primary\"\r\n                    aria-hidden=\"true\"\r\n                  />\r\n                )}\r\n                {heading.text}\r\n              </a>\r\n            </li>\r\n          )\r\n        })}\r\n      </ul>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport { AutoTableOfContents }\r\nexport type { AutoTableOfContentsProps, TOCItem }\r\n",
      "type": "registry:ui"
    },
    {
      "path": "hooks/use-url-change.ts",
      "content": "import * as React from \"react\"\r\n\r\nexport function useUrlChange() {\r\n  const [url, setUrl] = React.useState(\"\")\r\n  const lastUrlRef = React.useRef(\"\")\r\n\r\n  React.useEffect(() => {\r\n    if (typeof window === \"undefined\") return\r\n\r\n    const currentUrl = window.location.href\r\n    lastUrlRef.current = currentUrl\r\n    setUrl(currentUrl)\r\n\r\n    const checkForUrlChange = () => {\r\n      const newUrl = window.location.href\r\n      if (newUrl !== lastUrlRef.current) {\r\n        lastUrlRef.current = newUrl\r\n        setUrl(newUrl)\r\n      }\r\n    }\r\n\r\n    // Set up polling to check for URL changes\r\n    const intervalId = setInterval(checkForUrlChange, 100)\r\n\r\n    // Also check on popstate events for back/forward navigation\r\n    const handlePopState = () => {\r\n      checkForUrlChange()\r\n    }\r\n\r\n    window.addEventListener(\"popstate\", handlePopState)\r\n\r\n    return () => {\r\n      clearInterval(intervalId)\r\n      window.removeEventListener(\"popstate\", handlePopState)\r\n    }\r\n  }, [])\r\n\r\n  return url\r\n}\r\n",
      "type": "registry:hook"
    }
  ]
}