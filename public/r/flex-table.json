{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "flex-table",
  "type": "registry:ui",
  "title": "Flex Table",
  "description": "A lightweight, responsive 'pseudo-table' component that can render content either vertically or horizontally.",
  "files": [
    {
      "path": "components/ui/flex-table.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\n/**\r\n * Props for FlexTable\r\n * @template T - Row object type\r\n */\r\ninterface FlexTableProps<T extends Record<string, unknown> = any>\r\n  extends VariantProps<typeof tableVariants> {\r\n  /**\r\n   * An array of objects representing the raw, row-oriented data for the table.\r\n   */\r\n  data: T[]\r\n\r\n  /**\r\n   * Determines how headers are rendered. Use \"vertical\" to display headers as the top row.\r\n   * \"vertical\" renders headers as top row; \"horizontal\" renders headers as first column\r\n   * @default \"vertical\"\r\n   */\r\n  orientation?: \"vertical\" | \"horizontal\"\r\n\r\n  /** @default \"default\" */\r\n  // prettier-ignore\r\n  variant?: \"default\" | \"minimal\" | \"outline\" | \"card\" | \"striped\" | \"modern\" | \"compact\" | \"elegant\"\r\n\r\n  /** Optional CSS class for styling the table container. */\r\n  className?: string\r\n\r\n  /** Optional CSS class for styling header cells. */\r\n  headerClassName?: string\r\n\r\n  /** Optional CSS class for styling regular cells. */\r\n  cellClassName?: string\r\n\r\n  /** Optional React node to display when the data array is empty.\r\n   * @default \"No data\" */\r\n  emptyMessage?: React.ReactNode\r\n\r\n  /**\r\n   * Optional function for custom cell formatting that accepts the cell value, the row index,\r\n   * and the key (column name) as arguments, returning a React node.\r\n   */\r\n  formatter?: (\r\n    value: T[Extract<keyof T, string>],\r\n    rowIndex: number,\r\n    key: Extract<keyof T, string>\r\n  ) => React.ReactNode\r\n\r\n  /** Optional flag to enable sorting of the table.\r\n   * When true, clicking a header toggles sort order (asc → desc → none).\r\n   * @default false */\r\n  sortable?: boolean\r\n\r\n  /** Optional function to include/exclude rows.\r\n   * Return true to keep the row, false to omit it. */\r\n  filterBy?: (row: T) => boolean\r\n}\r\n\r\nconst tableVariants = cva(\"overflow-hidden rounded-md border text-sm\", {\r\n  variants: {\r\n    variant: {\r\n      default: \"\",\r\n      minimal: \"border-none\",\r\n      outline: \"border-2\",\r\n      card: \"bg-card shadow-md\",\r\n      striped: \"\",\r\n      modern: \"border-none shadow-lg\",\r\n      compact: \"\",\r\n      elegant: \"border-none\"\r\n    },\r\n    orientation: {\r\n      vertical: \"min-w-[300px]\",\r\n      horizontal: \"w-fit\"\r\n    }\r\n  },\r\n  defaultVariants: {\r\n    variant: \"default\",\r\n    orientation: \"vertical\"\r\n  }\r\n})\r\n\r\nconst headerVariants = cva(\"p-2 font-medium\", {\r\n  variants: {\r\n    variant: {\r\n      default: \"bg-muted/50\",\r\n      minimal: \"bg-transparent font-semibold\",\r\n      outline: \"bg-muted/50 divide-x-0 border-0\",\r\n      card: \"bg-muted/30\",\r\n      striped: \"bg-primary/10\",\r\n      modern: \"bg-background p-3 text-primary font-semibold\",\r\n      compact: \"bg-muted/50 p-1 text-xs\",\r\n      elegant:\r\n        \"bg-transparent p-3 text-muted-foreground uppercase text-xs tracking-wider\"\r\n    },\r\n    orientation: {\r\n      vertical: \"\",\r\n      horizontal: \"\"\r\n    }\r\n  },\r\n  defaultVariants: {\r\n    variant: \"default\",\r\n    orientation: \"vertical\"\r\n  },\r\n  compoundVariants: [\r\n    {\r\n      variant: \"minimal\",\r\n      orientation: \"vertical\",\r\n      className: \"border-b\"\r\n    },\r\n    {\r\n      variant: \"minimal\",\r\n      orientation: \"horizontal\",\r\n      className: \"border-r\"\r\n    },\r\n    {\r\n      variant: \"elegant\",\r\n      orientation: \"vertical\",\r\n      className: \"border-b border-primary/20\"\r\n    },\r\n    {\r\n      variant: \"elegant\",\r\n      orientation: \"horizontal\",\r\n      className: \"border-r border-primary/20\"\r\n    },\r\n    {\r\n      variant: \"modern\",\r\n      orientation: \"vertical\",\r\n      className: \"border-b-2\"\r\n    },\r\n    {\r\n      variant: \"modern\",\r\n      orientation: \"horizontal\",\r\n      className: \"border-r-2\"\r\n    }\r\n  ]\r\n})\r\n\r\nconst cellVariants = cva(\"p-2\", {\r\n  variants: {\r\n    variant: {\r\n      default: \"\",\r\n      minimal: \"\",\r\n      outline: \"divide-x-0 border-0\",\r\n      card: \"\",\r\n      striped: \"\",\r\n      modern: \"p-3\",\r\n      compact: \"p-1 text-xs\",\r\n      elegant: \"p-3 border-border/40\"\r\n    }\r\n  },\r\n  defaultVariants: {\r\n    variant: \"default\"\r\n  }\r\n})\r\n\r\n/**\r\n * Generic type for a column structure\r\n */\r\ntype Column<T> = {\r\n  header: Extract<keyof T, string>\r\n  items: Array<T[Extract<keyof T, string>]>\r\n  className?: string\r\n}\r\n\r\ntype SortOrder = \"asc\" | \"desc\" | null\r\n\r\n/**\r\n * Transforms an array of row objects into column-oriented data\r\n * @param data - Array of objects with uniform keys\r\n * @returns Array of Column<T> where each column has a header and its items\r\n */\r\nfunction formatTableData<T extends Record<string, unknown>>(\r\n  data: T[]\r\n): Column<T>[] {\r\n  if (data.length === 0) return []\r\n\r\n  const keys = Object.keys(data[0]) as Array<keyof T>\r\n\r\n  return keys.map((key) => ({\r\n    header: key as Extract<keyof T, string>,\r\n    items: data.map((row) => row[key] as T[Extract<keyof T, string>])\r\n  }))\r\n}\r\n\r\nfunction FlexTable<T extends Record<string, unknown>>({\r\n  data,\r\n  orientation = \"vertical\",\r\n  className,\r\n  headerClassName,\r\n  cellClassName,\r\n  emptyMessage = \"No data\",\r\n  formatter = (value) => value as React.ReactNode,\r\n  sortable = false,\r\n  filterBy,\r\n  variant = \"default\"\r\n}: FlexTableProps<T>) {\r\n  const [sortKey, setSortKey] = React.useState<keyof T | null>(null)\r\n  const [sortOrder, setSortOrder] = React.useState<SortOrder>(null)\r\n\r\n  const filteredData = React.useMemo(() => {\r\n    return filterBy ? data.filter(filterBy) : data\r\n  }, [data, filterBy])\r\n\r\n  const sortedData = React.useMemo(() => {\r\n    if (!sortKey || !sortOrder) return filteredData\r\n    return [...filteredData].sort((a, b) => {\r\n      const aValue = a[sortKey]\r\n      const bValue = b[sortKey]\r\n      if (typeof aValue === \"number\" && typeof bValue === \"number\") {\r\n        return sortOrder === \"asc\" ? aValue - bValue : bValue - aValue\r\n      }\r\n      return sortOrder === \"asc\"\r\n        ? String(aValue).localeCompare(String(bValue))\r\n        : String(bValue).localeCompare(String(aValue))\r\n    })\r\n  }, [filteredData, sortKey, sortOrder])\r\n\r\n  const columns: Column<T>[] = formatTableData(sortedData)\r\n  const rowCount = columns[0]?.items?.length ?? 0\r\n  const maxItems = Math.max(...columns.map((c) => c.items.length), 0)\r\n\r\n  const handleSort = (key: keyof T) => {\r\n    if (!sortable) return\r\n    if (sortKey === key) {\r\n      if (sortOrder === \"asc\") {\r\n        setSortOrder(\"desc\")\r\n      } else if (sortOrder === \"desc\") {\r\n        setSortKey(null)\r\n        setSortOrder(null)\r\n      }\r\n    } else {\r\n      setSortKey(key)\r\n      setSortOrder(\"asc\")\r\n    }\r\n  }\r\n\r\n  if (columns.length === 0 || maxItems === 0) {\r\n    return (\r\n      <div\r\n        className={cn(\r\n          \"flex min-h-[64px] items-center justify-center rounded-md border p-4 text-sm text-muted-foreground\",\r\n          className\r\n        )}\r\n      >\r\n        {emptyMessage}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className={cn(tableVariants({ variant, orientation }), className)}>\r\n      {orientation === \"vertical\" ? (\r\n        <div\r\n          className=\"grid\"\r\n          style={{\r\n            gridTemplateColumns: `repeat(${columns.length}, auto)`\r\n          }}\r\n        >\r\n          {/* Header Cells */}\r\n          {columns.map((column, colIndex) => (\r\n            <div\r\n              key={`header-${column.header}`}\r\n              className={cn(\r\n                sortable && \"cursor-pointer select-none\",\r\n                colIndex < columns.length - 1 && \"border-r\",\r\n                headerVariants({ variant, orientation: \"vertical\" }),\r\n                headerClassName,\r\n                column.className\r\n              )}\r\n              onClick={() => handleSort(column.header)}\r\n            >\r\n              {column.header}\r\n              {sortable &&\r\n                sortKey === column.header &&\r\n                (sortOrder === \"asc\" ? \" ↑\" : \" ↓\")}\r\n            </div>\r\n          ))}\r\n\r\n          {/* Data Cells */}\r\n          {Array.from({ length: rowCount }).flatMap((_, rowIndex) =>\r\n            columns.map((column, colIndex) => (\r\n              <div\r\n                key={`${String(column.header)}-${rowIndex}`}\r\n                className={cn(\r\n                  colIndex < columns.length - 1 && \"border-r\",\r\n                  rowIndex < rowCount - 1 && \"border-b\",\r\n                  cellVariants({ variant }),\r\n                  variant === \"striped\" && rowIndex % 2 === 0 && \"bg-muted/30\",\r\n                  cellClassName,\r\n                  column.className\r\n                )}\r\n              >\r\n                {formatter(column.items[rowIndex], rowIndex, column.header)}\r\n              </div>\r\n            ))\r\n          )}\r\n        </div>\r\n      ) : (\r\n        // Horizontal Orientation\r\n        <div\r\n          className=\"grid\"\r\n          style={{\r\n            gridTemplateColumns: `120px repeat(${maxItems}, 1fr)`\r\n          }}\r\n        >\r\n          {columns.map((column, colIndex) => (\r\n            <React.Fragment key={String(column.header)}>\r\n              {/* Header Cell */}\r\n              <div\r\n                className={cn(\r\n                  colIndex > 0 && \"border-t\",\r\n                  headerVariants({ variant, orientation: \"horizontal\" }),\r\n                  sortable && \"cursor-pointer select-none\",\r\n                  headerClassName,\r\n                  column.className\r\n                )}\r\n                style={{\r\n                  gridRow: colIndex + 1,\r\n                  gridColumn: 1\r\n                }}\r\n                onClick={() => handleSort(column.header)}\r\n              >\r\n                {column.header}\r\n                {sortable &&\r\n                  sortKey === column.header &&\r\n                  (sortOrder === \"asc\" ? \" ↑\" : \" ↓\")}\r\n              </div>\r\n\r\n              {/* Data Cells */}\r\n              {column.items.map((item, itemIndex) => (\r\n                <div\r\n                  key={`${String(column.header)}-${itemIndex}`}\r\n                  className={cn(\r\n                    itemIndex + 1 < maxItems && \"border-r\",\r\n                    colIndex > 0 && \"border-t\",\r\n                    cellVariants({ variant }),\r\n                    variant === \"striped\" &&\r\n                      itemIndex % 2 === 0 &&\r\n                      \"bg-muted/30\",\r\n                    cellClassName\r\n                  )}\r\n                  style={{\r\n                    gridRow: colIndex + 1,\r\n                    gridColumn: itemIndex + 2\r\n                  }}\r\n                >\r\n                  {formatter(item, itemIndex, column.header)}\r\n                </div>\r\n              ))}\r\n            </React.Fragment>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst RowTable = <T extends Record<string, unknown>>(\r\n  props: Omit<FlexTableProps<T>, \"orientation\">\r\n) => <FlexTable {...props} orientation=\"vertical\" />\r\n\r\nconst ColumnTable = <T extends Record<string, unknown>>(\r\n  props: Omit<FlexTableProps<T>, \"orientation\">\r\n) => <FlexTable {...props} orientation=\"horizontal\" />\r\n\r\nexport { FlexTable, RowTable, ColumnTable, formatTableData }\r\nexport type { FlexTableProps, Column }\r\n",
      "type": "registry:ui"
    }
  ]
}