{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tabs",
  "type": "registry:ui",
  "title": "Tabs",
  "description": "Tabs component with extensive style and animation variations.",
  "dependencies": [
    "@radix-ui/react-tabs"
  ],
  "files": [
    {
      "path": "components/ui/tabs.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\nimport { cva } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\ninterface TabsProps\n  extends React.ComponentPropsWithoutRef<typeof TabsPrimitive.Root> {\n  // prettier-ignore\n  variant?: \"default\" | \"underlined\" | \"brutalist\" | \"pill-filled\" | \"pill-outlined\" | \"pill-boxed\" | \"segmented\" | \"bootstrap\" | \"vercel\"\n}\n\ninterface TabsContextValue {\n  variant: TabsProps[\"variant\"]\n  positions: { value: string; left: number; width: number }[]\n  setPositions: React.Dispatch<\n    React.SetStateAction<{ value: string; left: number; width: number }[]>\n  >\n  activeTab: string\n  setActiveTab: React.Dispatch<React.SetStateAction<string>>\n  hoveredTab: number | null\n  setHoveredTab: React.Dispatch<React.SetStateAction<number | null>>\n}\n\nconst TabsContext = React.createContext<TabsContextValue>({\n  variant: \"default\",\n  positions: [],\n  setPositions: () => {},\n  activeTab: \"\",\n  setActiveTab: () => {},\n  hoveredTab: null,\n  setHoveredTab: () => {}\n})\n\nconst tabsListVariants = cva(\n  \"inline-flex h-8 items-center w-full p-0 bg-background justify-start rounded-none\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground\",\n        underlined: \"text-muted-foreground border-b h-10\",\n        brutalist: \"border-b\",\n        \"pill-filled\": \"h-auto gap-1\",\n        \"pill-outlined\": \"h-auto gap-1\",\n        \"pill-boxed\": \"rounded-2xl p-1 h-auto gap-1 border\",\n        segmented: \"rounded-md border overflow-hidden divide-x\",\n        bootstrap: \"border-b\",\n        vercel: \"relative h-[30px]\"\n      }\n    },\n    defaultVariants: { variant: \"default\" }\n  }\n)\n\nconst tabsTriggerVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 h-full rounded-none\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"rounded-md w-full py-1 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow\",\n        underlined:\n          \"h-10 border-b-2 border-transparent px-4 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:border-primary data-[state=active]:shadow-none\",\n        brutalist:\n          \"rounded-none bg-background data-[state=active]:shadow-none border border-b-[3px] border-transparent data-[state=active]:border-primary\",\n        \"pill-filled\":\n          \"rounded-2xl data-[state=active]:bg-primary data-[state=active]:text-primary-foreground\",\n        \"pill-outlined\":\n          \"rounded-2xl border border-transparent data-[state=active]:border-border data-[state=active]:shadow-none\",\n        \"pill-boxed\":\n          \"rounded-2xl data-[state=active]:bg-primary data-[state=active]:text-primary-foreground\",\n        segmented:\n          \"w-full data-[state=active]:bg-primary data-[state=active]:text-primary-foreground\",\n        bootstrap:\n          \"-mb-[2px] rounded-t border border-transparent border-b-border px-5 py-2.5 data-[state=active]:border-border data-[state=active]:border-b-background data-[state=active]:text-foreground text-foreground/60\",\n        vercel:\n          \"relative px-3 py-2 text-muted-foreground data-[state=active]:text-foreground transition-colors z-20\"\n      }\n    },\n    defaultVariants: { variant: \"default\" }\n  }\n)\n\nconst Tabs = ({ variant = \"default\", ...props }: TabsProps) => {\n  const [positions, setPositions] = React.useState<\n    { value: string; left: number; width: number }[]\n  >([])\n  const [hoveredTab, setHoveredTab] = React.useState<number | null>(null)\n  const [activeTab, setActiveTab] = React.useState<string>(\n    (props.defaultValue as string) || (props.value as string) || \"\"\n  )\n\n  return (\n    <TabsContext.Provider\n      value={{\n        variant: variant || \"default\",\n        positions,\n        setPositions,\n        activeTab,\n        setActiveTab,\n        hoveredTab,\n        setHoveredTab\n      }}\n    >\n      <TabsPrimitive.Root\n        onValueChange={(val) => setActiveTab(val)}\n        {...props}\n      />\n    </TabsContext.Provider>\n  )\n}\n\ntype TabsListProps = React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n\nconst TabsList = React.forwardRef<\n  React.ComponentRef<typeof TabsPrimitive.List>,\n  TabsListProps\n>(({ className, ...props }, ref) => {\n  const { variant, positions, activeTab, hoveredTab } =\n    React.useContext(TabsContext)\n\n  const activePosition = positions.find((pos) => pos.value === activeTab)\n  const hoverPosition = hoveredTab !== null ? positions[hoveredTab] : null\n\n  return (\n    <TabsPrimitive.List\n      ref={ref}\n      className={cn(tabsListVariants({ variant }), className)}\n      {...props}\n    >\n      {props.children}\n\n      {variant === \"vercel\" && (\n        <>\n          <div\n            className=\"absolute h-[30px] rounded-[6px] bg-[#0e0f1114] transition-all duration-300 dark:bg-[#ffffff1a]\"\n            style={{\n              width: hoverPosition?.width ?? 0,\n              left: hoverPosition?.left ?? 0,\n              opacity: hoveredTab !== null ? 1 : 0\n            }}\n          />\n\n          <div\n            className=\"absolute bottom-[-6px] h-[2px] bg-[#0e0f11] transition-all duration-300 dark:bg-white\"\n            style={{\n              width: activePosition?.width ?? 0,\n              left: activePosition?.left ?? 0\n            }}\n          />\n        </>\n      )}\n    </TabsPrimitive.List>\n  )\n})\nTabsList.displayName = TabsPrimitive.List.displayName\n\ntype TabsTriggerProps = React.ComponentPropsWithoutRef<\n  typeof TabsPrimitive.Trigger\n>\n\nconst TabsTrigger = React.forwardRef<\n  React.ComponentRef<typeof TabsPrimitive.Trigger>,\n  TabsTriggerProps\n>(({ className, value, ...props }, ref) => {\n  const { variant, setPositions, setHoveredTab } = React.useContext(TabsContext)\n  const tabRef = React.useRef<HTMLButtonElement>(null)\n  const index = React.useRef<number>(-1)\n\n  React.useEffect(() => {\n    if (variant === \"vercel\" && tabRef.current) {\n      const updatePosition = () => {\n        const parentRect =\n          tabRef.current?.parentElement?.getBoundingClientRect()\n        const rect = tabRef.current?.getBoundingClientRect()\n\n        if (rect && parentRect && index.current !== -1 && value) {\n          setPositions((prev) => {\n            const newPositions = [...prev]\n            newPositions[index.current] = {\n              value: value,\n              left: rect.left - parentRect.left,\n              width: rect.width\n            }\n            return newPositions\n          })\n        }\n      }\n\n      updatePosition()\n      const observer = new ResizeObserver(updatePosition)\n      observer.observe(tabRef.current)\n\n      return () => observer.disconnect()\n    }\n  }, [variant, value, setPositions])\n\n  return (\n    <TabsPrimitive.Trigger\n      ref={(el) => {\n        if (el) {\n          tabRef.current = el\n          index.current = Array.from(el.parentNode?.children || [])\n            .filter((child) => child instanceof HTMLElement)\n            .indexOf(el)\n        }\n        if (typeof ref === \"function\") ref(el)\n        else if (ref) ref.current = el\n      }}\n      className={cn(tabsTriggerVariants({ variant }), className)}\n      onMouseEnter={() => variant === \"vercel\" && setHoveredTab(index.current)}\n      onMouseLeave={() => variant === \"vercel\" && setHoveredTab(null)}\n      value={value}\n      {...props}\n    />\n  )\n})\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ComponentRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsContent, TabsList, TabsTrigger }\nexport type { TabsProps }\n",
      "type": "registry:ui"
    }
  ]
}