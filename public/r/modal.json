{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "modal",
  "type": "registry:ui",
  "title": "Modal",
  "description": "A flexible, accessible dialog system that can render as either a traditional modal dialog on desktop devices or a bottom drawer on mobile devices.",
  "dependencies": [
    "@radix-ui/react-dialog",
    "vaul"
  ],
  "registryDependencies": [
    "https://shadcn-ui-variants.vercel.app/r/button.json"
  ],
  "files": [
    {
      "path": "components/ui/modal.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\r\nimport { AlertTriangle, CheckCircle2, InfoIcon, X, XCircle } from \"lucide-react\"\r\nimport { Drawer as DrawerPrimitive } from \"vaul\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\nimport { useMediaQuery } from \"@/hooks/use-media-query\"\r\nimport { Button, ButtonProps } from \"@/components/ui/button\"\r\n\r\ninterface ModalProps {\r\n  /** The modal content. */\r\n  children: React.ReactNode\r\n\r\n  /** Optional additional CSS classes to apply */\r\n  className?: string\r\n\r\n  /** If true, the modal renders its children as a single child */\r\n  asChild?: boolean\r\n\r\n  /** Controls the open state of the modal */\r\n  open?: boolean\r\n\r\n  /** Callback fired when the open state changes */\r\n  onOpenChange?: (open: boolean) => void\r\n\r\n  /** If true, the header is separated from the content with a border\r\n   * @default false */\r\n  separatedHeader?: boolean\r\n\r\n  /** If true, the footer is separated from the content with a border\r\n   * @default false */\r\n  separatedFooter?: boolean\r\n\r\n  /** The visual style variant of the modal\r\n   * @default \"default\" */\r\n  variant?: \"default\" | \"success\" | \"destructive\" | \"warning\"\r\n\r\n  /** If true, includes an icon in the modal based on the variant\r\n   * @default false */\r\n  withIcon?: boolean\r\n\r\n  /** Aligns the modal content either to the left or center\r\n   * @default \"left\" */\r\n  align?: \"left\" | \"center\"\r\n\r\n  /** A custom icon element to be rendered instead of the default variant icon */\r\n  customIcon?: React.ReactElement\r\n\r\n  /** The role of the modal, determining its behavioral mode\r\n   * @default \"dialog\" */\r\n  mode?: \"dialog\" | \"alertdialog\"\r\n\r\n  /** If true, displays a close button in the top-right corner\r\n   * @default false */\r\n  showCloseButton?: boolean\r\n\r\n  /** If true, the modal adapts its layout for responsive design\r\n   * @default true */\r\n  responsive?: boolean\r\n}\r\n\r\nconst ModalContext = React.createContext<{\r\n  isDesktop: boolean\r\n  mobileView: boolean\r\n  nonResponsiveView: boolean\r\n  separatedHeader: boolean\r\n  separatedFooter: boolean\r\n  variant: ModalProps[\"variant\"]\r\n  withIcon: boolean\r\n  align: ModalProps[\"align\"]\r\n  customIcon: React.ReactElement | undefined\r\n  mode: ModalProps[\"mode\"]\r\n  showCloseButton: boolean\r\n}>({\r\n  isDesktop: false,\r\n  mobileView: false,\r\n  nonResponsiveView: false,\r\n  separatedHeader: false,\r\n  separatedFooter: false,\r\n  variant: \"default\",\r\n  withIcon: false,\r\n  align: \"left\",\r\n  customIcon: undefined,\r\n  mode: \"dialog\",\r\n  showCloseButton: false\r\n})\r\n\r\nconst useModalContext = () => {\r\n  const context = React.useContext(ModalContext)\r\n  if (!context) {\r\n    throw new Error(\r\n      \"Modal components cannot be rendered outside the Modal Context\"\r\n    )\r\n  }\r\n  return context\r\n}\r\n\r\nconst Modal = ({\r\n  children,\r\n  separatedHeader = false,\r\n  separatedFooter = false,\r\n  variant = \"default\",\r\n  withIcon = false,\r\n  align = \"left\",\r\n  customIcon,\r\n  mode = \"dialog\",\r\n  showCloseButton = false,\r\n  responsive = true,\r\n  ...props\r\n}: ModalProps) => {\r\n  const isDesktop = useMediaQuery(\"(min-width: 768px)\")\r\n  const mobileView = responsive && !isDesktop\r\n  const nonResponsiveView = !responsive && !isDesktop\r\n\r\n  const ModalRoot = mobileView ? DrawerPrimitive.Root : DialogPrimitive.Root\r\n\r\n  return (\r\n    <ModalContext.Provider\r\n      value={{\r\n        isDesktop,\r\n        mobileView,\r\n        nonResponsiveView,\r\n        separatedHeader,\r\n        separatedFooter,\r\n        variant,\r\n        withIcon,\r\n        align,\r\n        customIcon,\r\n        mode,\r\n        showCloseButton\r\n      }}\r\n    >\r\n      <ModalRoot {...props} {...(mobileView && { autoFocus: true })}>\r\n        {children}\r\n      </ModalRoot>\r\n    </ModalContext.Provider>\r\n  )\r\n}\r\n\r\nconst ModalTrigger = React.forwardRef<HTMLButtonElement, ButtonProps>(\r\n  ({ className, children, ...props }, ref) => {\r\n    const { mobileView } = useModalContext()\r\n    const Trigger = mobileView\r\n      ? DrawerPrimitive.Trigger\r\n      : DialogPrimitive.Trigger\r\n\r\n    return (\r\n      <Trigger asChild>\r\n        <Button ref={ref} className={className} {...props}>\r\n          {children}\r\n        </Button>\r\n      </Trigger>\r\n    )\r\n  }\r\n)\r\nModalTrigger.displayName = \"ModalTrigger\"\r\n\r\nconst ModalOverlay = React.forwardRef<\r\n  | React.ElementRef<typeof DialogPrimitive.Overlay>\r\n  | React.ElementRef<typeof DrawerPrimitive.Overlay>,\r\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay> &\r\n    React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\r\n>(({ className, ...props }, ref) => {\r\n  const { isDesktop, mobileView } = useModalContext()\r\n  const Overlay = mobileView ? DrawerPrimitive.Overlay : DialogPrimitive.Overlay\r\n\r\n  return (\r\n    <Overlay\r\n      ref={ref}\r\n      className={cn(\r\n        \"fixed inset-0 z-50 bg-black/80\",\r\n        isDesktop &&\r\n          \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nModalOverlay.displayName = \"ModalOverlay\"\r\n\r\nconst ModalContentWrapper = React.forwardRef<\r\n  | React.ElementRef<typeof DialogPrimitive.Content>\r\n  | React.ElementRef<typeof DrawerPrimitive.Content>,\r\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content> &\r\n    React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\r\n>(({ className, children, ...props }, ref) => {\r\n  const { mobileView, showCloseButton, mode } = useModalContext()\r\n\r\n  const Portal = mobileView ? DrawerPrimitive.Portal : DialogPrimitive.Portal\r\n  const Close = mobileView ? DrawerPrimitive.Close : DialogPrimitive.Close\r\n  const ContentWrapper = mobileView\r\n    ? DrawerPrimitive.Content\r\n    : DialogPrimitive.Content\r\n\r\n  const wrapperClass = mobileView\r\n    ? \"inset-x-0 bottom-0 mt-24 flex h-auto flex-col rounded-t-[10px]\"\r\n    : \"left-[50%] top-[50%] flex flex-col w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-0 overflow-hidden p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\"\r\n\r\n  return (\r\n    <Portal>\r\n      <ModalOverlay />\r\n      <ContentWrapper\r\n        ref={ref}\r\n        role={mode}\r\n        className={cn(\r\n          \"fixed z-50 border bg-background\",\r\n          wrapperClass,\r\n          className\r\n        )}\r\n        {...props}\r\n      >\r\n        {mobileView && (\r\n          <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\r\n        )}\r\n        {children}\r\n        {showCloseButton && (\r\n          <Close\r\n            aria-label=\"Close\"\r\n            className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\"\r\n          >\r\n            <X className=\"h-4 w-4\" />\r\n            <span className=\"sr-only\">Close</span>\r\n          </Close>\r\n        )}\r\n      </ContentWrapper>\r\n    </Portal>\r\n  )\r\n})\r\nModalContentWrapper.displayName = \"ModalContentWrapper\"\r\n\r\nconst ModalContent = ({ className, children, ...props }: ModalProps) => {\r\n  const { isDesktop, nonResponsiveView, mode } = useModalContext()\r\n\r\n  return (\r\n    <ModalContentWrapper\r\n      className={cn(\r\n        \"gap-0\",\r\n        (isDesktop || nonResponsiveView) && \"p-0\",\r\n        \"max-h-full max-w-full overflow-hidden md:max-h-[90vh] md:max-w-lg\",\r\n        className\r\n      )}\r\n      onInteractOutside={(e) => mode !== \"dialog\" && e.preventDefault()}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </ModalContentWrapper>\r\n  )\r\n}\r\nModalContent.displayName = \"ModalContent\"\r\n\r\nconst HeaderWrapper = ({ className, children, ...props }: ModalProps) => {\r\n  const { mobileView } = useModalContext()\r\n  const headerClass = mobileView\r\n    ? \"grid gap-1.5 p-4 text-center sm:text-left\"\r\n    : \"flex flex-col space-y-1.5 text-center sm:text-left bg-background px-4 pb-0 pt-6\"\r\n\r\n  return (\r\n    <div className={cn(headerClass, className)} {...props}>\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst TitleWrapper = ({ className, children, ...props }: ModalProps) => {\r\n  const { mobileView, nonResponsiveView, align, separatedHeader } =\r\n    useModalContext()\r\n  const Title = mobileView ? DrawerPrimitive.Title : DialogPrimitive.Title\r\n\r\n  return (\r\n    <Title\r\n      className={cn(\r\n        \"text-lg font-semibold leading-none tracking-tight\",\r\n        align === \"center\" && !separatedHeader && \"text-2xl\",\r\n        nonResponsiveView && \"text-2xl\",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </Title>\r\n  )\r\n}\r\n\r\nconst variantIcons: Record<\r\n  NonNullable<ModalProps[\"variant\"]>,\r\n  React.ReactElement\r\n> = {\r\n  default: <InfoIcon className=\"text-primary\" />,\r\n  success: <CheckCircle2 className=\"text-emerald-600\" />,\r\n  destructive: <XCircle className=\"text-destructive\" />,\r\n  warning: <AlertTriangle className=\"text-amber-600\" />\r\n}\r\n\r\nconst ModalTitle = ({\r\n  children,\r\n  className,\r\n  ...props\r\n}: ModalProps & React.ComponentProps<\"div\">) => {\r\n  const {\r\n    isDesktop,\r\n    nonResponsiveView,\r\n    variant,\r\n    separatedHeader,\r\n    withIcon,\r\n    align,\r\n    customIcon\r\n  } = useModalContext()\r\n\r\n  return (\r\n    <HeaderWrapper\r\n      className={cn(\r\n        \"px-6 pb-4 pt-6\",\r\n        \"[&>svg]:size-6\",\r\n        isDesktop && \"[&>svg]:-mb-1\",\r\n        \"flex flex-row items-center justify-start gap-2\",\r\n        separatedHeader && \"mb-4 border-b py-4\",\r\n        align === \"center\" && separatedHeader && \"justify-center\",\r\n        align === \"center\" && !separatedHeader && \"flex-col [&>svg]:size-9\",\r\n        nonResponsiveView && \"flex-col [&>svg]:size-9\",\r\n        className\r\n      )}\r\n    >\r\n      {withIcon && (customIcon ?? variantIcons[variant!])}\r\n      <TitleWrapper {...props}>{children}</TitleWrapper>\r\n    </HeaderWrapper>\r\n  )\r\n}\r\nModalTitle.displayName = \"ModalTitle\"\r\n\r\nconst ModalDescription = ({ className, children, ...props }: ModalProps) => {\r\n  const { mobileView, nonResponsiveView, withIcon, align, separatedHeader } =\r\n    useModalContext()\r\n  const Description = mobileView\r\n    ? DrawerPrimitive.Description\r\n    : DialogPrimitive.Description\r\n\r\n  return (\r\n    <Description\r\n      className={cn(\r\n        \"text-sm text-muted-foreground\",\r\n        \"px-6\",\r\n        mobileView && \"pb-2\",\r\n        withIcon && align === \"left\" && !separatedHeader && \"pl-14\",\r\n        align === \"center\" || nonResponsiveView ? \"pl-4 text-center\" : \"\",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </Description>\r\n  )\r\n}\r\nModalDescription.displayName = \"ModalDescription\"\r\n\r\nconst ModalBody = ({ className, children, ...props }: ModalProps) => {\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"mx-6 mt-4\",\r\n        \"flex min-h-0 flex-1 flex-col overflow-y-auto\",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\nModalBody.displayName = \"ModalBody\"\r\n\r\nconst ModalFooter = ({ className, children, ...props }: ModalProps) => {\r\n  const { isDesktop, separatedFooter, align } = useModalContext()\r\n  const footerClass = !isDesktop\r\n    ? \"mt-auto flex flex-col gap-2 p-4\"\r\n    : \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\"\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        footerClass,\r\n        \"w-full py-6\",\r\n        isDesktop && \"bg-background px-6\",\r\n        separatedFooter && \"mt-4 border-t py-4\",\r\n        align === \"center\" && isDesktop && \"flex sm:flex-row sm:justify-center\",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\nModalFooter.displayName = \"ModalFooter\"\r\n\r\nconst ModalAction = React.forwardRef<HTMLButtonElement, ButtonProps>(\r\n  ({ className, children, ...props }, ref) => {\r\n    const { variant, align } = useModalContext()\r\n    return (\r\n      <Button\r\n        ref={ref}\r\n        {...{ variant }}\r\n        {...props}\r\n        className={cn(align === \"center\" && \"min-w-36\", className)}\r\n      >\r\n        {children}\r\n      </Button>\r\n    )\r\n  }\r\n)\r\nModalAction.displayName = \"ModalAction\"\r\n\r\nconst ModalClose = React.forwardRef<HTMLButtonElement, ButtonProps>(\r\n  ({ className, children, ...props }, ref) => {\r\n    const { mobileView, align } = useModalContext()\r\n    const Close = mobileView ? DrawerPrimitive.Close : DialogPrimitive.Close\r\n\r\n    return (\r\n      <Close aria-label=\"Close\" asChild>\r\n        <Button\r\n          ref={ref}\r\n          variant=\"outline\"\r\n          {...props}\r\n          className={cn(align === \"center\" && \"min-w-36\", className)}\r\n        >\r\n          {children}\r\n        </Button>\r\n      </Close>\r\n    )\r\n  }\r\n)\r\nModalClose.displayName = \"ModalClose\"\r\n\r\nexport {\r\n  Modal,\r\n  ModalAction,\r\n  ModalBody,\r\n  ModalClose,\r\n  ModalContent,\r\n  ModalDescription,\r\n  ModalFooter,\r\n  ModalTitle,\r\n  ModalTrigger\r\n}\r\nexport type { ModalProps }\r\n",
      "type": "registry:ui"
    },
    {
      "path": "hooks/use-media-query.ts",
      "content": "import * as React from \"react\"\r\n\r\nexport function useMediaQuery(query: string) {\r\n  const [matches, setMatches] = React.useState<boolean | null>(null)\r\n\r\n  React.useEffect(() => {\r\n    const media = window.matchMedia(query)\r\n    setMatches(media.matches)\r\n\r\n    const listener = (e: MediaQueryListEvent) => setMatches(e.matches)\r\n    media.addEventListener(\"change\", listener)\r\n    return () => media.removeEventListener(\"change\", listener)\r\n  }, [query])\r\n\r\n  return matches ?? false\r\n}\r\n",
      "type": "registry:hook"
    }
  ]
}