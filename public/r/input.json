{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "input",
  "type": "registry:ui",
  "title": "Input",
  "description": "An advanced input component with toggable extensions.",
  "files": [
    {
      "path": "components/ui/input.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\ninterface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  /**\n   * Optional React element to be displayed as an icon at the beginning of the input,\n   * inside the border. Typically an SVG or an icon component.\n   */\n  startIcon?: React.ReactElement<HTMLElement | SVGElement | unknown>\n\n  /**\n   * Optional React element to be displayed as an icon at the end of the input,\n   * inside the border. Typically an SVG or an icon component.\n   */\n  endIcon?: React.ReactElement<HTMLElement | SVGElement | unknown>\n\n  /**\n   * Optional string content displayed inline at the start of the input,\n   * after the start icon (if present), inside the border. Useful for prefixes like units or symbols.\n   */\n  startInline?: string\n\n  /**\n   * Optional string content displayed inline at the end of the input,\n   * before the end icon or character counter (if present), inside the border. Useful for suffixes.\n   */\n  endInline?: string\n\n  /**\n   * Optional React node displayed as an addon before the input field,\n   * visually attached but outside the input's main container/border.\n   * Useful for labels, buttons, or dropdown triggers associated with the input.\n   */\n  startAddon?: React.ReactNode\n\n  /**\n   * Optional React node displayed as an addon after the input field,\n   * visually attached but outside the input's main container/border.\n   * Useful for labels, buttons, or dropdown triggers associated with the input.\n   */\n  endAddon?: React.ReactNode\n\n  /**\n   * Determines if and where the character count (current/maxLength) is displayed.\n   * Requires the 'maxLength' prop (from HTMLInputElement attributes) to be set.\n   * - 'inside': Show counter inside the input field border, near the end.\n   * - 'outside': Show counter below the input field.\n   * - 'false': Do not show the counter (default).\n   * @default \"false\"\n   */\n  showMaxLength?: \"inside\" | \"outside\" | \"false\"\n}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  (\n    {\n      className,\n      type,\n      startIcon,\n      endIcon,\n      startInline,\n      endInline,\n      startAddon,\n      endAddon,\n      showMaxLength = \"false\",\n      value,\n      onChange,\n      defaultValue,\n      maxLength,\n      ...props\n    },\n    ref\n  ) => {\n    const [internalValue, setInternalValue] = React.useState(defaultValue ?? \"\")\n    const isControlled = value !== undefined\n    const currentValue = isControlled ? value : internalValue\n\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      const newValue = maxLength\n        ? e.target.value.slice(0, maxLength)\n        : e.target.value\n      if (!isControlled) setInternalValue(newValue)\n      onChange?.(e)\n    }\n\n    const characterCount = String(currentValue).length\n    const hasAddons = startAddon || endAddon\n\n    const renderInline = (content: React.ReactNode, side: \"start\" | \"end\") => (\n      <span\n        className={cn(\n          \"flex select-none items-center bg-background text-sm text-muted-foreground\",\n          side === \"start\"\n            ? \"pl-3\" // after icon\n            : \"pr-2\" // before counter\n        )}\n      >\n        {content}\n      </span>\n    )\n\n    return (\n      <div className=\"w-full\">\n        <div\n          className={cn(\n            \"flex items-stretch rounded-md border border-input bg-background focus-within:ring-2 focus-within:ring-ring\",\n            hasAddons && \"overflow-hidden\",\n            className\n          )}\n        >\n          {startAddon && (\n            <div className=\"flex select-none items-center border-r border-input bg-muted/60 px-3 text-foreground/80\">\n              {startAddon}\n            </div>\n          )}\n\n          <div className=\"relative flex flex-1 items-center\">\n            {startIcon && (\n              <div className=\"pl-2 text-muted-foreground/80\">\n                {React.cloneElement(\n                  startIcon as React.ReactElement<HTMLElement | SVGElement>,\n                  {\n                    className: cn(\n                      \"size-4\",\n                      (\n                        startIcon?.props as React.HTMLProps<\n                          HTMLElement | SVGElement\n                        >\n                      )?.className\n                    )\n                  }\n                )}\n              </div>\n            )}\n\n            {startInline && renderInline(startInline, \"start\")}\n\n            <input\n              type={type}\n              className={cn(\n                \"w-full min-w-0 flex-1 bg-transparent py-2 text-sm\",\n                \"placeholder:text-muted-foreground focus-visible:outline-none\",\n                \"file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:opacity-50\",\n                startIcon ? \"pl-2\" : startInline ? \"pl-1\" : \"pl-3\",\n                endIcon || endInline || showMaxLength === \"inside\"\n                  ? \"pr-2\"\n                  : \"pr-3\",\n                !hasAddons && \"rounded-md\",\n                className\n              )}\n              ref={ref}\n              value={currentValue ?? \"\"}\n              onChange={handleChange}\n              maxLength={maxLength}\n              {...props}\n            />\n\n            {endInline && renderInline(endInline, \"end\")}\n\n            {showMaxLength === \"inside\" && maxLength && (\n              <span className=\"select-none pr-2 text-xs text-muted-foreground/80\">\n                {characterCount}/{maxLength}\n              </span>\n            )}\n\n            {endIcon && (\n              <div className=\"pr-2 text-muted-foreground/80\">\n                {React.cloneElement(\n                  endIcon as React.ReactElement<HTMLElement | SVGElement>,\n                  {\n                    className: cn(\n                      \"size-4\",\n                      (\n                        endIcon?.props as React.HTMLProps<\n                          HTMLElement | SVGElement\n                        >\n                      )?.className\n                    )\n                  }\n                )}\n              </div>\n            )}\n          </div>\n\n          {endAddon && (\n            <div className=\"flex select-none items-center border-l border-input bg-accent px-3\">\n              {endAddon}\n            </div>\n          )}\n        </div>\n\n        {showMaxLength === \"outside\" && maxLength && (\n          <div className=\"mt-1 flex justify-end text-xs text-muted-foreground\">\n            {characterCount}/{maxLength}\n          </div>\n        )}\n      </div>\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\nexport type { InputProps }\n",
      "type": "registry:ui"
    }
  ]
}