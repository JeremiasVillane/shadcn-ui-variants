{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "prose",
  "type": "registry:ui",
  "title": "Prose",
  "description": "A component system that applies typography styles to your content.",
  "files": [
    {
      "path": "components/ui/prose.tsx",
      "content": "import * as React from \"react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\ninterface ProseProps extends React.HTMLAttributes<HTMLDivElement> {\r\n  /** The HTML element type to render as the main wrapper.\r\n   * @default \"main\" */\r\n  as?: \"div\" | \"main\" | \"section\" | \"article\"\r\n  /** The overall typographic scale to apply to the content within the Prose wrapper.\r\n   * @default \"default\" */\r\n  scale?: \"default\" | \"sm\" | \"xs\" | \"lg\"\r\n  /** The content to be rendered and styled within the Prose component. Can be raw HTML or helper components. */\r\n  children: React.ReactNode\r\n  /** Additional CSS class names to apply to the wrapper element. */\r\n  className?: string\r\n}\r\n\r\nconst proseStyles = {\r\n  h1: \"scroll-m-20 font-extrabold tracking-tight text-foreground\",\r\n  h2: \"scroll-m-20 border-b border-border pb-2 font-semibold tracking-tight text-foreground first:mt-0\",\r\n  h3: \"scroll-m-20 font-semibold tracking-tight text-foreground\",\r\n  h4: \"scroll-m-20 font-semibold tracking-tight text-foreground\",\r\n  p: \"text-pretty leading-7 tracking-wide text-foreground/90\",\r\n  a: \"font-medium text-primary underline underline-offset-4 hover:text-primary/90\",\r\n  blockquote:\r\n    \"relative rounded-sm border-l-8 border-l-muted-foreground bg-muted font-sans italic leading-relaxed before:absolute before:left-3 before:font-serif before:text-muted-foreground before:content-['â€œ'] text-pretty\",\r\n  pre: \"overflow-x-auto rounded bg-muted p-4 font-normal text-foreground/90\",\r\n  code: \"rounded-none bg-transparent p-0 font-normal text-foreground/90\",\r\n  \"inline-code\":\r\n    \"relative rounded bg-muted px-[0.3rem] py-[0.050rem] font-mono text-foreground\",\r\n  lead: \"text-pretty text-muted-foreground\",\r\n  \"sub-lead\": \"leading-6 text-muted-foreground\",\r\n  large: \"font-semibold text-foreground\",\r\n  small: \"font-medium leading-none text-foreground/70\",\r\n  muted: \"leading-7 text-muted-foreground\",\r\n  strong: \"font-semibold text-foreground\",\r\n  ul: \"ml-6 list-disc text-foreground/90\",\r\n  ol: \"ml-6 list-decimal text-foreground/90\",\r\n  li: \"\"\r\n} as const\r\n\r\ntype ProseSizes = Record<\r\n  keyof typeof proseStyles,\r\n  Record<NonNullable<ProseProps[\"scale\"]>, string>\r\n>\r\n\r\nconst proseSizes: ProseSizes = {\r\n  h1: {\r\n    default: \"text-4xl lg:text-5xl mb-4\",\r\n    sm: \"text-3xl lg:text-4xl mb-3\",\r\n    xs: \"text-2xl lg:text-3xl mb-2\",\r\n    lg: \"text-5xl lg:text-6xl mb-5\"\r\n  },\r\n  h2: {\r\n    default: \"text-2xl lg:text-3xl mb-4 mt-10\",\r\n    sm: \"text-xl lg:text-2xl mb-3 mt-8\",\r\n    xs: \"text-lg lg:text-xl mb-2 mt-6\",\r\n    lg: \"text-3xl lg:text-4xl mb-5 mt-12\"\r\n  },\r\n  h3: {\r\n    default: \"text-xl lg:text-2xl mb-4 mt-8\",\r\n    sm: \"text-lg lg:text-xl mb-3 mt-6\",\r\n    xs: \"text-base lg:text-lg mb-2 mt-4\",\r\n    lg: \"text-2xl lg:text-3xl mb-5 mt-10\"\r\n  },\r\n  h4: {\r\n    default: \"text-lg lg:text-xl mb-4 mt-6\",\r\n    sm: \"text-base lg:text-lg mb-3 mt-4\",\r\n    xs: \"text-sm lg:text-base mb-2 mt-2\",\r\n    lg: \"text-xl lg:text-2xl mb-5 mt-8\"\r\n  },\r\n  p: {\r\n    default: \"text-base my-4 [&:not(:first-child)]:mt-6\",\r\n    sm: \"text-base my-3 [&:not(:first-child)]:mt-5\",\r\n    xs: \"text-sm my-2 [&:not(:first-child)]:mt-4\",\r\n    lg: \"text-lg my-5 [&:not(:first-child)]:mt-7\"\r\n  },\r\n  a: { default: \"\", sm: \"\", xs: \"\", lg: \"\" },\r\n  blockquote: {\r\n    default: \"text-base before:text-6xl my-6 py-4 pl-16 pr-5 before:top-3\",\r\n    sm: \"text-base before:text-5xl my-5 py-3 pl-14 pr-4 before:top-3\",\r\n    xs: \"text-sm before:text-4xl my-4 py-3 pl-12 pr-3 before:top-3\",\r\n    lg: \"text-lg before:text-7xl my-7 py-5 pl-20 pr-6 before:top-3.5\"\r\n  },\r\n  pre: {\r\n    default: \"my-6 text-sm\",\r\n    sm: \"my-5 text-sm\",\r\n    xs: \"my-4 text-xs\",\r\n    lg: \"my-7 text-base\"\r\n  },\r\n  code: { default: \"text-sm\", sm: \"text-sm\", xs: \"text-xs\", lg: \"text-base\" },\r\n  \"inline-code\": {\r\n    default: \"text-sm\",\r\n    sm: \"text-sm\",\r\n    xs: \"text-xs\",\r\n    lg: \"text-base\"\r\n  },\r\n  lead: {\r\n    default: \"text-lg md:text-xl my-4\",\r\n    sm: \"text-lg md:text-[19px] my-3\",\r\n    xs: \"text-base md:text-lg my-2\",\r\n    lg: \"text-xl md:text-2xl my-5\"\r\n  },\r\n  \"sub-lead\": {\r\n    default: \"text-base lg:text-[17px] my-4\",\r\n    sm: \"text-base lg:text-[17px] my-3\",\r\n    xs: \"text-sm lg:text-[15px] my-2\",\r\n    lg: \"text-lg lg:text-[19px] my-5\"\r\n  },\r\n  large: {\r\n    default: \"text-[17px] lg:text-lg my-4\",\r\n    sm: \"text-[17px] lg:text-lg my-3\",\r\n    xs: \"text-[15px] lg:text-base my-2\",\r\n    lg: \"text-[19px] lg:text-lg my-5\"\r\n  },\r\n  small: {\r\n    default: \"text-[15px]\",\r\n    sm: \"text-[15px]\",\r\n    xs: \"text-[13px]\",\r\n    lg: \"text-[17px]\"\r\n  },\r\n  muted: { default: \"my-4\", sm: \"my-3\", xs: \"my-2\", lg: \"my-5\" },\r\n  strong: { default: \"\", sm: \"\", xs: \"\", lg: \"\" },\r\n  ul: {\r\n    default: \"text-base [&>li]:mt-2 my-6\",\r\n    sm: \"text-base [&>li]:mt-2 my-5\",\r\n    xs: \"text-sm [&>li]:mt-1.5 my-4\",\r\n    lg: \"text-lg [&>li]:mt-2.5 my-7\"\r\n  },\r\n  ol: {\r\n    default: \"text-base [&>li]:mt-2 my-6\",\r\n    sm: \"text-base [&>li]:mt-2 my-5\",\r\n    xs: \"text-sm [&>li]:mt-1.5 my-4\",\r\n    lg: \"text-lg [&>li]:mt-2.5 my-7\"\r\n  },\r\n  li: { default: \"mt-2\", sm: \"mt-2\", xs: \"mt-2\", lg: \"mt-2\" }\r\n}\r\n\r\nconst Prose = React.forwardRef<HTMLDivElement, ProseProps>(\r\n  ({ className, as = \"main\", scale = \"default\", children, ...props }, ref) => {\r\n    const Wrapper = as\r\n\r\n    const enhancedChildren = React.Children.map(children, (child) => {\r\n      if (!React.isValidElement(child)) {\r\n        return child\r\n      }\r\n\r\n      const childProps = child.props as {\r\n        className?: string\r\n        \"data-prose-type\"?: string\r\n        scale?: ProseProps[\"scale\"]\r\n        [key: string]: any\r\n      }\r\n\r\n      let styleKey: keyof typeof proseStyles | null = null\r\n      const dataType = childProps[\"data-prose-type\"]\r\n      const isHtmlElement = typeof child.type === \"string\"\r\n\r\n      if (dataType && dataType in proseStyles) {\r\n        styleKey = dataType as keyof typeof proseStyles\r\n      } else if (isHtmlElement && (child.type as string) in proseStyles) {\r\n        styleKey = child.type as keyof typeof proseStyles\r\n      }\r\n\r\n      const propsToPass: Record<string, any> = {\r\n        scale,\r\n        className: childProps.className\r\n      }\r\n\r\n      if (isHtmlElement && styleKey) {\r\n        propsToPass.className = cn(\r\n          proseStyles[styleKey],\r\n          proseSizes[styleKey]?.[scale],\r\n          childProps.className\r\n        )\r\n      } else if (!isHtmlElement && styleKey) {\r\n        propsToPass.className = cn(\r\n          proseStyles[styleKey],\r\n          proseSizes[styleKey]?.[scale],\r\n          childProps.className\r\n        )\r\n      } else if (!isHtmlElement) {\r\n        propsToPass.className = childProps.className\r\n      } else {\r\n        propsToPass.className = childProps.className\r\n      }\r\n\r\n      return React.cloneElement(child as React.ReactElement<any>, propsToPass)\r\n    })\r\n\r\n    return (\r\n      <Wrapper className={cn(\"prose\", className)} ref={ref} {...props}>\r\n        {enhancedChildren}\r\n      </Wrapper>\r\n    )\r\n  }\r\n)\r\nProse.displayName = \"Prose\"\r\n\r\nconst H1 = React.forwardRef<\r\n  HTMLHeadingElement,\r\n  React.HTMLAttributes<HTMLHeadingElement> & {\r\n    scale?: NonNullable<ProseProps[\"scale\"]>\r\n  }\r\n>(({ scale = \"default\", className, ...props }, ref) => {\r\n  return (\r\n    <h1\r\n      className={cn(proseStyles[\"h1\"], proseSizes[\"h1\"]?.[scale], className)}\r\n      ref={ref}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nH1.displayName = \"H1\"\r\n\r\nconst H2 = React.forwardRef<\r\n  HTMLHeadingElement,\r\n  React.HTMLAttributes<HTMLHeadingElement> & {\r\n    scale?: NonNullable<ProseProps[\"scale\"]>\r\n  }\r\n>(({ scale = \"default\", className, ...props }, ref) => {\r\n  return (\r\n    <h2\r\n      className={cn(proseStyles[\"h2\"], proseSizes[\"h2\"]?.[scale], className)}\r\n      ref={ref}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nH2.displayName = \"H2\"\r\n\r\nconst H3 = React.forwardRef<\r\n  HTMLHeadingElement,\r\n  React.HTMLAttributes<HTMLHeadingElement> & {\r\n    scale?: NonNullable<ProseProps[\"scale\"]>\r\n  }\r\n>(({ scale = \"default\", className, ...props }, ref) => {\r\n  return (\r\n    <h3\r\n      className={cn(proseStyles[\"h3\"], proseSizes[\"h3\"]?.[scale], className)}\r\n      ref={ref}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nH3.displayName = \"H3\"\r\n\r\nconst H4 = React.forwardRef<\r\n  HTMLHeadingElement,\r\n  React.HTMLAttributes<HTMLHeadingElement> & {\r\n    scale?: NonNullable<ProseProps[\"scale\"]>\r\n  }\r\n>(({ scale = \"default\", className, ...props }, ref) => {\r\n  return (\r\n    <h4\r\n      className={cn(proseStyles[\"h4\"], proseSizes[\"h4\"]?.[scale], className)}\r\n      ref={ref}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nH4.displayName = \"H4\"\r\n\r\nconst P = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLParagraphElement> & {\r\n    scale?: NonNullable<ProseProps[\"scale\"]>\r\n  }\r\n>(({ scale = \"default\", className, ...props }, ref) => {\r\n  return (\r\n    <p\r\n      className={cn(proseStyles[\"p\"], proseSizes[\"p\"]?.[scale], className)}\r\n      ref={ref}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nP.displayName = \"P\"\r\n\r\nconst A = React.forwardRef<\r\n  HTMLAnchorElement,\r\n  React.AnchorHTMLAttributes<HTMLAnchorElement>\r\n>(({ className, ...props }, ref) => {\r\n  return <a className={cn(proseStyles[\"a\"], className)} ref={ref} {...props} />\r\n})\r\nA.displayName = \"A\"\r\n\r\nconst Blockquote = React.forwardRef<\r\n  HTMLQuoteElement,\r\n  React.HTMLAttributes<HTMLQuoteElement> & {\r\n    scale?: NonNullable<ProseProps[\"scale\"]>\r\n  }\r\n>(({ scale = \"default\", className, ...props }, ref) => {\r\n  return (\r\n    <blockquote\r\n      className={cn(\r\n        proseStyles[\"blockquote\"],\r\n        proseSizes[\"blockquote\"]?.[scale],\r\n        className\r\n      )}\r\n      ref={ref}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nBlockquote.displayName = \"Blockquote\"\r\n\r\nconst Code = React.forwardRef<\r\n  HTMLElement,\r\n  React.HTMLAttributes<HTMLElement> & {\r\n    scale?: NonNullable<ProseProps[\"scale\"]>\r\n  }\r\n>(({ scale = \"default\", className, ...props }, ref) => {\r\n  return (\r\n    <pre className={proseStyles[\"pre\"]}>\r\n      <code\r\n        className={cn(\r\n          proseStyles[\"code\"],\r\n          proseSizes[\"code\"]?.[scale],\r\n          className\r\n        )}\r\n        ref={ref}\r\n        {...props}\r\n      >\r\n        {props.children}\r\n      </code>\r\n    </pre>\r\n  )\r\n})\r\nCode.displayName = \"Code\"\r\n\r\nconst InlineCode = React.forwardRef<\r\n  HTMLElement,\r\n  React.HTMLAttributes<HTMLElement> & {\r\n    scale?: NonNullable<ProseProps[\"scale\"]>\r\n  }\r\n>(({ scale = \"default\", className, ...props }, ref) => {\r\n  return (\r\n    <code\r\n      className={cn(\r\n        proseStyles[\"inline-code\"],\r\n        proseSizes[\"inline-code\"]?.[scale],\r\n        className\r\n      )}\r\n      ref={ref}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nInlineCode.displayName = \"InlineCode\"\r\n\r\nconst Lead = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLParagraphElement> & {\r\n    scale?: NonNullable<ProseProps[\"scale\"]>\r\n  }\r\n>(({ scale = \"default\", className, ...props }, ref) => {\r\n  return (\r\n    <p\r\n      className={cn(\r\n        proseStyles[\"lead\"],\r\n        proseSizes[\"lead\"]?.[scale],\r\n        className\r\n      )}\r\n      ref={ref}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nLead.displayName = \"Lead\"\r\n\r\nconst SubLead = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLParagraphElement> & {\r\n    scale?: NonNullable<ProseProps[\"scale\"]>\r\n  }\r\n>(({ scale = \"default\", className, ...props }, ref) => {\r\n  return (\r\n    <p\r\n      className={cn(\r\n        proseStyles[\"sub-lead\"],\r\n        proseSizes[\"sub-lead\"]?.[scale],\r\n        className\r\n      )}\r\n      ref={ref}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSubLead.displayName = \"SubLead\"\r\n\r\nconst Large = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement> & {\r\n    scale?: NonNullable<ProseProps[\"scale\"]>\r\n  }\r\n>(({ scale = \"default\", className, ...props }, ref) => {\r\n  return (\r\n    <div\r\n      className={cn(\r\n        proseStyles[\"large\"],\r\n        proseSizes[\"large\"]?.[scale],\r\n        className\r\n      )}\r\n      ref={ref}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nLarge.displayName = \"Large\"\r\n\r\nconst Small = React.forwardRef<\r\n  HTMLElement,\r\n  React.HTMLAttributes<HTMLElement> & {\r\n    scale?: NonNullable<ProseProps[\"scale\"]>\r\n  }\r\n>(({ scale = \"default\", className, ...props }, ref) => {\r\n  return (\r\n    <small\r\n      className={cn(\r\n        proseStyles[\"small\"],\r\n        proseSizes[\"small\"]?.[scale],\r\n        className\r\n      )}\r\n      ref={ref}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nSmall.displayName = \"Small\"\r\n\r\nconst Muted = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLParagraphElement> & {\r\n    scale?: NonNullable<ProseProps[\"scale\"]>\r\n  }\r\n>(({ scale = \"default\", className, ...props }, ref) => {\r\n  return (\r\n    <p\r\n      className={cn(\r\n        proseStyles[\"muted\"],\r\n        proseSizes[\"muted\"]?.[scale],\r\n        className\r\n      )}\r\n      ref={ref}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nMuted.displayName = \"Muted\"\r\n\r\nconst Strong = React.forwardRef<HTMLElement, React.HTMLAttributes<HTMLElement>>(\r\n  ({ className, ...props }, ref) => {\r\n    return (\r\n      <strong\r\n        className={cn(proseStyles[\"strong\"], className)}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    )\r\n  }\r\n)\r\nStrong.displayName = \"Strong\"\r\n\r\nconst Ul = React.forwardRef<\r\n  HTMLUListElement,\r\n  React.HTMLAttributes<HTMLUListElement> & {\r\n    scale?: NonNullable<ProseProps[\"scale\"]>\r\n  }\r\n>(({ scale = \"default\", className, ...props }, ref) => {\r\n  return (\r\n    <ul\r\n      className={cn(proseStyles[\"ul\"], proseSizes[\"ul\"]?.[scale], className)}\r\n      ref={ref}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nUl.displayName = \"Ul\"\r\n\r\nconst Ol = React.forwardRef<\r\n  HTMLOListElement,\r\n  React.HTMLAttributes<HTMLOListElement> & {\r\n    scale?: NonNullable<ProseProps[\"scale\"]>\r\n  }\r\n>(({ scale = \"default\", className, ...props }, ref) => {\r\n  return (\r\n    <ol\r\n      className={cn(proseStyles[\"ol\"], proseSizes[\"ol\"]?.[scale], className)}\r\n      ref={ref}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nOl.displayName = \"Ol\"\r\n\r\nconst Li = React.forwardRef<\r\n  HTMLLIElement,\r\n  React.HTMLAttributes<HTMLLIElement> & {\r\n    scale?: NonNullable<ProseProps[\"scale\"]>\r\n  }\r\n>(({ scale = \"default\", className, ...props }, ref) => {\r\n  return (\r\n    <li\r\n      className={cn(proseStyles[\"li\"], proseSizes[\"li\"]?.[scale], className)}\r\n      ref={ref}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nLi.displayName = \"Li\"\r\n\r\nexport {\r\n  A,\r\n  Blockquote,\r\n  Code,\r\n  H1,\r\n  H2,\r\n  H3,\r\n  H4,\r\n  InlineCode,\r\n  Large,\r\n  Lead,\r\n  Li,\r\n  Muted,\r\n  Ol,\r\n  P,\r\n  Prose,\r\n  Small,\r\n  Strong,\r\n  SubLead,\r\n  Ul\r\n}\r\nexport type { ProseProps }\r\n",
      "type": "registry:ui"
    }
  ]
}