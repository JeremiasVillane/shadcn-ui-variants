{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tag-box",
  "type": "registry:ui",
  "title": "Tag Box",
  "author": "Inspired by Fancy Box (mxkaske)",
  "description": "A versatile component for managing and displaying tags with rich customization options.",
  "dependencies": [
    "@radix-ui/react-popover"
  ],
  "registryDependencies": [
    "https://shadcn-ui-variants.vercel.app/r/accordion.json",
    "https://shadcn-ui-variants.vercel.app/r/badge.json",
    "https://shadcn-ui-variants.vercel.app/r/button.json",
    "https://shadcn-ui-variants.vercel.app/r/color-picker.json",
    "https://shadcn-ui-variants.vercel.app/r/input.json",
    "https://shadcn-ui-variants.vercel.app/r/modal.json",
    "https://shadcn-ui-variants.vercel.app/r/separator.json"
  ],
  "files": [
    {
      "path": "components/ui/tag-box.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\r\nimport { ChevronsUpDown, Edit2, X } from \"lucide-react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\nimport {\r\n  Accordion,\r\n  AccordionContent,\r\n  AccordionItem,\r\n  AccordionTrigger\r\n} from \"@/components/ui/accordion\"\r\nimport { Badge, type BadgeProps } from \"@/components/ui/badge\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { ColorPicker } from \"@/components/ui/color-picker\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport {\r\n  Modal,\r\n  ModalAction,\r\n  ModalBody,\r\n  ModalClose,\r\n  ModalContent,\r\n  ModalDescription,\r\n  ModalFooter,\r\n  ModalTitle,\r\n  ModalTrigger\r\n} from \"@/components/ui/modal\"\r\nimport { Separator } from \"@/components/ui/separator\"\r\n\r\nconst DEFAULT_COLOR = \"#9A71F4\"\r\n\r\ninterface TagType {\r\n  id: string\r\n  name: string\r\n  color?: string\r\n}\r\n\r\ninterface TagBoxProps\r\n  extends BadgeProps,\r\n    Omit<\r\n      React.ComponentPropsWithoutRef<\"div\">,\r\n      \"onChange\" | \"value\" | \"defaultValue\" | \"color\"\r\n    > {\r\n  /**\r\n   * An array of currently selected tags (controlled mode).\r\n   */\r\n  value?: TagType[]\r\n\r\n  /**\r\n   * Initial array of selected tags for uncontrolled mode.\r\n   */\r\n  defaultValue?: TagType[]\r\n\r\n  /**\r\n   * Callback function invoked when the selected tags change.\r\n   * It receives an array of the new selected tags.\r\n   */\r\n  onChange?: (tags: TagType[]) => void\r\n\r\n  /** Name attribute for the hidden input, for form submission. */\r\n  name?: string\r\n\r\n  /**\r\n   * An array of all tags available to the user.\r\n   * These are used for suggestions and management.\r\n   */\r\n  userTags?: TagType[]\r\n\r\n  /**\r\n   * Callback function invoked when a user edits an existing tag\r\n   * through the \"Manage tags\" dialog.\r\n   * It receives the updated tag object.\r\n   */\r\n  onTagEdit?: (tag: TagType) => void\r\n\r\n  /**\r\n   * Callback function invoked when a user removes an existing tag\r\n   * through the \"Manage tags\" dialog.\r\n   * It receives the tag object to be removed.\r\n   */\r\n  onTagRemove?: (tag: TagType) => void\r\n\r\n  /**\r\n   * Maximum number of tags that can be selected.\r\n   * If set, the input will be disabled once this limit is reached.\r\n   */\r\n  maxTags?: number\r\n\r\n  /**\r\n   * Determines if the max tags count should be displayed.\r\n   * @default false */\r\n  showMaxTags?: boolean\r\n\r\n  /**\r\n   * Placeholder text to display in the tag input field.\r\n   * @default \"Type or select tags...\" */\r\n  placeholder?: string\r\n\r\n  /**\r\n   * Placeholder text to display in the tag input field when the max tags limit is reached.\r\n   * @default \"Max tags reached\" */\r\n  placeholderWhenFull?: string\r\n\r\n  /**\r\n   * Optional CSS class name to apply to the root element of the TagBox.\r\n   */\r\n  className?: string\r\n\r\n  /**\r\n   * Optional CSS class name to apply to the tag element.\r\n   */\r\n  tagClassName?: string\r\n\r\n  /**\r\n   * Determines if tags should have customizable colors.\r\n   * @default true */\r\n  withColor?: boolean\r\n}\r\n\r\nconst getTagStyle = (color?: string) => {\r\n  if (!color) return {}\r\n  return {\r\n    borderColor: `${color}`,\r\n    backgroundColor: `${color}30`,\r\n    color\r\n  }\r\n}\r\nfunction TagBox({\r\n  // Controlled/uncontrolled state\r\n  value: valueProp,\r\n  defaultValue,\r\n  onChange: onChangeProp,\r\n\r\n  // Tag data and management callbacks\r\n  userTags: userTagsProp = [],\r\n  onTagEdit: onTagEditProp,\r\n  onTagRemove: onTagRemoveProp,\r\n\r\n  // Behavior props\r\n  maxTags,\r\n  showMaxTags = false,\r\n  withColor = true,\r\n\r\n  // UI Text\r\n  placeholder = \"Type or select tags...\",\r\n  placeholderWhenFull = \"Max tags reached\",\r\n\r\n  // Styling props\r\n  className,\r\n  tagClassName,\r\n\r\n  // Badge props\r\n  variant,\r\n  size,\r\n  shape,\r\n  leftElement,\r\n  rightElement,\r\n\r\n  // Form integration props\r\n  id, // Inherited from div attributes, applied to root\r\n  name, // For the hidden input\r\n\r\n  // Disabled state\r\n  disabled: disabledProp,\r\n\r\n  // Other div props (e.g., style, data-*, aria-*)\r\n  ...restDivProps\r\n}: TagBoxProps) {\r\n  const inputRef = React.useRef<HTMLInputElement>(null)\r\n  const [open, setOpen] = React.useState(false)\r\n  const [openDialog, setOpenDialog] = React.useState(false)\r\n  const [inputValue, setInputValue] = React.useState<string>(\"\")\r\n\r\n  const [internalSelectedTags, setInternalSelectedTags] = React.useState<\r\n    TagType[]\r\n  >(defaultValue || [])\r\n  const isControlled = valueProp !== undefined\r\n  const currentSelectedTags = isControlled ? valueProp : internalSelectedTags\r\n\r\n  const popoverContentRef = React.useRef<HTMLDivElement>(null)\r\n\r\n  const updateSelectedTags = (newTags: TagType[]) => {\r\n    if (!isControlled) {\r\n      setInternalSelectedTags(newTags)\r\n    }\r\n    onChangeProp?.(newTags)\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    if (open && inputRef.current) {\r\n      const timeoutId = setTimeout(() => {\r\n        inputRef.current?.focus()\r\n      }, 10)\r\n      return () => clearTimeout(timeoutId)\r\n    }\r\n  }, [open])\r\n\r\n  React.useEffect(() => {\r\n    const handleScroll = (event: Event) => {\r\n      if (open) {\r\n        if (\r\n          popoverContentRef.current &&\r\n          popoverContentRef.current.contains(event.target as Node)\r\n        ) {\r\n          return\r\n        }\r\n        setOpen(false)\r\n      }\r\n    }\r\n    if (open) {\r\n      document.addEventListener(\"scroll\", handleScroll, true)\r\n    }\r\n    return () => {\r\n      document.removeEventListener(\"scroll\", handleScroll, true)\r\n    }\r\n  }, [open, setOpen])\r\n\r\n  const addTag = (tagName: string) => {\r\n    if (!!maxTags && maxTags > 0 && currentSelectedTags.length >= maxTags) {\r\n      return\r\n    }\r\n\r\n    const trimmedName = tagName.trim()\r\n    if (!trimmedName) return\r\n\r\n    const existingUserTag = userTagsProp.find(\r\n      (t) => t.name.toLowerCase() === trimmedName.toLowerCase()\r\n    )\r\n    const isAdded = currentSelectedTags.some(\r\n      (t) => t.name.toLowerCase() === trimmedName.toLowerCase()\r\n    )\r\n\r\n    if (isAdded) {\r\n      setInputValue(\"\")\r\n      return\r\n    }\r\n\r\n    let newTagToAdd: TagType\r\n    if (existingUserTag) {\r\n      newTagToAdd = existingUserTag\r\n    } else {\r\n      newTagToAdd = {\r\n        id: \"\",\r\n        name: trimmedName\r\n      }\r\n      if (withColor) {\r\n        newTagToAdd.color = DEFAULT_COLOR\r\n      }\r\n    }\r\n    updateSelectedTags([...currentSelectedTags, newTagToAdd])\r\n    setInputValue(\"\")\r\n    setOpen(false)\r\n  }\r\n\r\n  const removeTag = (tagName: string) => {\r\n    updateSelectedTags(currentSelectedTags.filter((t) => t.name !== tagName))\r\n  }\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setInputValue(e.target.value)\r\n    setOpen(e.target.value.length > 0)\r\n  }\r\n\r\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === \"Enter\" && inputValue.trim()) {\r\n      e.preventDefault()\r\n      addTag(inputValue.trim())\r\n    }\r\n  }\r\n\r\n  const availableTags = userTagsProp.filter(\r\n    (tag) =>\r\n      !currentSelectedTags.some((t) => t.name === tag.name) &&\r\n      tag.name.toLowerCase().includes(inputValue.toLowerCase())\r\n  )\r\n\r\n  const showCreateOption =\r\n    inputValue.trim() &&\r\n    !userTagsProp.some(\r\n      (tag) => tag.name.toLowerCase() === inputValue.trim().toLowerCase()\r\n    ) &&\r\n    !currentSelectedTags.some(\r\n      (tag) => tag.name.toLowerCase() === inputValue.trim().toLowerCase()\r\n    )\r\n\r\n  const allTagsForManagement = Array.from(\r\n    new Map(\r\n      [...userTagsProp, ...currentSelectedTags].map((tag) => [\r\n        tag.id || tag.name,\r\n        tag\r\n      ])\r\n    ).values()\r\n  )\r\n\r\n  const isInputDisabled =\r\n    (!!maxTags && currentSelectedTags.length >= maxTags) || !!disabledProp\r\n\r\n  return (\r\n    <div {...restDivProps} className={cn(\"w-full\", className)}>\r\n      {/* Hidden input for form integration */}\r\n      {!!name && (\r\n        <input\r\n          type=\"hidden\"\r\n          name={name}\r\n          value={JSON.stringify(\r\n            currentSelectedTags.map(({ id, name, color }) => ({\r\n              id,\r\n              name,\r\n              ...(withColor && color && { color })\r\n            }))\r\n          )}\r\n        />\r\n      )}\r\n\r\n      <PopoverPrimitive.Root open={open} onOpenChange={setOpen}>\r\n        <PopoverPrimitive.Trigger asChild>\r\n          <div className=\"w-full\">\r\n            <Input\r\n              ref={inputRef}\r\n              id={id}\r\n              placeholder={\r\n                isInputDisabled && placeholderWhenFull !== \"Max tags reached\"\r\n                  ? placeholderWhenFull\r\n                  : isInputDisabled &&\r\n                      currentSelectedTags.length >= (maxTags || 0)\r\n                    ? placeholderWhenFull\r\n                    : placeholder\r\n              }\r\n              value={inputValue}\r\n              onChange={handleInputChange}\r\n              onKeyDown={handleKeyDown}\r\n              endInline={\r\n                showMaxTags && maxTags\r\n                  ? `${currentSelectedTags.length}/${maxTags}`\r\n                  : \"\"\r\n              }\r\n              endIcon={\r\n                <ChevronsUpDown className=\"size-4 cursor-pointer opacity-50 hover:opacity-80 active:opacity-100\" />\r\n              }\r\n              className=\"w-full\"\r\n              disabled={isInputDisabled}\r\n              aria-autocomplete=\"list\"\r\n              aria-expanded={open}\r\n              aria-controls={id ? `${id}-popover` : undefined}\r\n            />\r\n          </div>\r\n        </PopoverPrimitive.Trigger>\r\n\r\n        <PopoverPrimitive.Portal>\r\n          <PopoverPrimitive.Content\r\n            ref={popoverContentRef}\r\n            className=\"z-50 rounded-md border bg-popover shadow-md outline-none animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95\"\r\n            sideOffset={4}\r\n            align=\"start\"\r\n            side=\"bottom\"\r\n            onOpenAutoFocus={(e) => e.preventDefault()}\r\n            style={{\r\n              width: \"var(--radix-popover-trigger-width)\"\r\n            }}\r\n            id={id ? `${id}-popover` : undefined}\r\n            role=\"listbox\"\r\n          >\r\n            <div className=\"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\">\r\n              <div className=\"max-h-[300px] overflow-y-auto overflow-x-hidden\">\r\n                {availableTags.length > 0 || showCreateOption ? (\r\n                  <section className=\"max-h-[200px] overflow-auto p-1 text-foreground\">\r\n                    {availableTags.map((tag) => (\r\n                      <article\r\n                        key={tag.name}\r\n                        role=\"option\"\r\n                        aria-selected=\"false\"\r\n                        onClick={(e) => {\r\n                          e.preventDefault()\r\n                          addTag(tag.name)\r\n                        }}\r\n                        className=\"relative flex cursor-pointer select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none hover:bg-muted/80 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\"\r\n                      >\r\n                        <div className=\"flex items-center\">\r\n                          {withColor && tag.color && (\r\n                            <div\r\n                              className=\"mr-2 size-4 rounded-full\"\r\n                              style={{ backgroundColor: tag.color }}\r\n                            />\r\n                          )}\r\n                          {tag.name}\r\n                        </div>\r\n                      </article>\r\n                    ))}\r\n                    {showCreateOption && (\r\n                      <article\r\n                        role=\"option\"\r\n                        aria-selected=\"false\"\r\n                        onClick={(e) => {\r\n                          e.preventDefault()\r\n                          addTag(inputValue.trim())\r\n                        }}\r\n                        className=\"relative flex cursor-pointer select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm text-muted-foreground outline-none hover:bg-muted/80 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\"\r\n                      >\r\n                        <div className=\"flex items-center\">\r\n                          {withColor && (\r\n                            <div className=\"mr-2 size-4 rounded-full bg-gray-300\" />\r\n                          )}\r\n                          Create \"{inputValue.trim()}\"\r\n                        </div>\r\n                      </article>\r\n                    )}\r\n                  </section>\r\n                ) : (\r\n                  <div className=\"py-6 text-center text-sm text-muted-foreground\">\r\n                    No tags found\r\n                  </div>\r\n                )}\r\n\r\n                <Separator />\r\n\r\n                <section className=\"overflow-hidden p-1 text-foreground\">\r\n                  <article className=\"relative flex cursor-pointer select-none items-center gap-2 rounded-sm text-sm outline-none [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\">\r\n                    <Button\r\n                      type=\"button\"\r\n                      variant=\"ghost\"\r\n                      iconLeft={<Edit2 />}\r\n                      iconAnimation=\"zoomIn\"\r\n                      onClick={(e) => {\r\n                        e.preventDefault()\r\n                        setOpenDialog(true)\r\n                        setOpen(false)\r\n                      }}\r\n                      className=\"flex h-8 w-full justify-start px-2\"\r\n                    >\r\n                      Manage tags\r\n                    </Button>\r\n                  </article>\r\n                </section>\r\n              </div>\r\n            </div>\r\n          </PopoverPrimitive.Content>\r\n        </PopoverPrimitive.Portal>\r\n      </PopoverPrimitive.Root>\r\n\r\n      <div className=\"mt-2 flex flex-wrap gap-2\">\r\n        {currentSelectedTags.map((tag) => (\r\n          <Badge\r\n            key={tag.id || tag.name}\r\n            shape={shape ?? \"pill\"}\r\n            style={withColor && tag.color ? getTagStyle(tag.color) : {}}\r\n            rightElement={\r\n              rightElement ?? (\r\n                <X\r\n                  role=\"button\"\r\n                  onClick={() => removeTag(tag.name)}\r\n                  className=\"transition-colors hover:text-destructive\"\r\n                  aria-label={`Remove tag ${tag.name}`}\r\n                />\r\n              )\r\n            }\r\n            className={tagClassName}\r\n            variant={variant}\r\n            size={size}\r\n            leftElement={leftElement}\r\n            disabled={disabledProp}\r\n          >\r\n            {tag.name}\r\n          </Badge>\r\n        ))}\r\n      </div>\r\n\r\n      <Modal open={openDialog} onOpenChange={setOpenDialog} separatedFooter>\r\n        <ModalContent>\r\n          <ModalTitle>Manage Tags</ModalTitle>\r\n          <ModalDescription>Edit or delete existing tags</ModalDescription>\r\n\r\n          <ModalBody>\r\n            {allTagsForManagement.map((tag) => (\r\n              <TagForm\r\n                key={tag.id || tag.name}\r\n                {...tag}\r\n                withColor={withColor}\r\n                {...{ variant, size, shape, leftElement, rightElement }}\r\n                onDelete={() => {\r\n                  if (tag.id && tag.id.length > 0) onTagRemoveProp?.(tag)\r\n                  removeTag(tag.name)\r\n                }}\r\n                onSubmit={(formData) => {\r\n                  const newNameFromForm = formData.name\r\n\r\n                  const updatedTagFromForm: TagType = {\r\n                    ...tag,\r\n                    name: newNameFromForm.trim()\r\n                  }\r\n\r\n                  if (withColor) {\r\n                    const colorFromForm = formData.color\r\n                    updatedTagFromForm.color = colorFromForm || DEFAULT_COLOR\r\n                  }\r\n\r\n                  if (tag.id && tag.id.length > 0) {\r\n                    onTagEditProp?.(updatedTagFromForm)\r\n                  }\r\n\r\n                  const newSelectedValues = currentSelectedTags.map(\r\n                    (selectedTag) =>\r\n                      (selectedTag.id && selectedTag.id === tag.id) ||\r\n                      selectedTag.name === tag.name\r\n                        ? updatedTagFromForm\r\n                        : selectedTag\r\n                  )\r\n                  updateSelectedTags(newSelectedValues)\r\n                }}\r\n              />\r\n            ))}\r\n          </ModalBody>\r\n\r\n          <ModalFooter>\r\n            <ModalClose variant=\"outline\">Close</ModalClose>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}\r\n\r\ntype TagFormProps = {\r\n  color?: string\r\n  onSubmit: (formData: Omit<TagType, \"id\">) => void\r\n  onDelete: () => void\r\n  withColor: boolean\r\n} & TagType &\r\n  Omit<BadgeProps, \"disabled\">\r\n\r\nconst TagForm = ({\r\n  id,\r\n  name,\r\n  color,\r\n  onSubmit,\r\n  onDelete,\r\n  withColor,\r\n  // Badge props\r\n  variant,\r\n  size,\r\n  shape,\r\n  leftElement,\r\n  rightElement\r\n}: TagFormProps) => {\r\n  const inputRef = React.useRef<HTMLInputElement>(null)\r\n  const [accordionValue, setAccordionValue] = React.useState(\"\")\r\n  const [nameValue, setNameValue] = React.useState(name)\r\n  const [colorValue, setColorValue] = React.useState(\r\n    withColor ? color || DEFAULT_COLOR : undefined\r\n  )\r\n\r\n  React.useEffect(() => {\r\n    if (accordionValue) inputRef.current?.focus()\r\n  }, [accordionValue])\r\n\r\n  const initialColorForCompare = withColor ? color || DEFAULT_COLOR : undefined\r\n  const isModified =\r\n    name !== nameValue || (withColor && initialColorForCompare !== colorValue)\r\n\r\n  return (\r\n    <Accordion\r\n      type=\"single\"\r\n      variant=\"contained\"\r\n      collapsible\r\n      value={accordionValue}\r\n      onValueChange={setAccordionValue}\r\n    >\r\n      <AccordionItem value={name}>\r\n        <div className=\"flex items-center justify-between\">\r\n          <Badge\r\n            shape={shape ?? \"pill\"}\r\n            style={withColor && color ? getTagStyle(color) : {}}\r\n            {...{ variant, size, leftElement, rightElement }}\r\n          >\r\n            {name}\r\n          </Badge>\r\n          <div className=\"flex items-center gap-4\">\r\n            <AccordionTrigger className=\"gap-1 text-foreground/80 hover:text-foreground hover:no-underline\">\r\n              Edit\r\n            </AccordionTrigger>\r\n            <Modal\r\n              mode=\"alertdialog\"\r\n              variant=\"destructive\"\r\n              responsive={false}\r\n              align=\"left\"\r\n              withIcon\r\n            >\r\n              <ModalTrigger\r\n                variant=\"destructive\"\r\n                size=\"sm\"\r\n                className=\"h-8 w-20\"\r\n              >\r\n                Delete\r\n              </ModalTrigger>\r\n              <ModalContent>\r\n                <ModalTitle>Are you sure?</ModalTitle>\r\n                <ModalDescription className=\"flex flex-col\">\r\n                  <span>\r\n                    You are about to delete the tag:{\" \"}\r\n                    <span className=\"font-semibold\">{name}</span>.\r\n                  </span>\r\n                  <span>This action cannot be undone.</span>\r\n                </ModalDescription>\r\n                <ModalFooter>\r\n                  <ModalClose>Cancel</ModalClose>\r\n                  <ModalAction onClick={onDelete}>Delete</ModalAction>\r\n                </ModalFooter>\r\n              </ModalContent>\r\n            </Modal>\r\n          </div>\r\n        </div>\r\n        <AccordionContent>\r\n          <section className=\"flex items-end gap-4 pl-1 pt-1\">\r\n            <div className=\"w-full space-y-2\">\r\n              <label htmlFor={`name-${id || name}`}>Name</label>\r\n              <Input\r\n                ref={inputRef}\r\n                id={`name-${id || name}`}\r\n                name=\"name\"\r\n                value={nameValue}\r\n                onChange={(e) => setNameValue(e.target.value)}\r\n                minLength={2}\r\n                maxLength={20}\r\n                showMaxLength=\"inside\"\r\n                className=\"h-8\"\r\n                required\r\n              />\r\n            </div>\r\n            {withColor && (\r\n              <div className=\"space-y-2\">\r\n                <label htmlFor={`color-${id || name}`}>Color</label>\r\n                <ColorPicker\r\n                  id={`color-${id || name}`}\r\n                  name=\"color\"\r\n                  value={colorValue || DEFAULT_COLOR}\r\n                  onChange={setColorValue}\r\n                  className=\"size-8 cursor-pointer p-1\"\r\n                />\r\n              </div>\r\n            )}\r\n            <Button\r\n              type=\"button\"\r\n              size=\"sm\"\r\n              onClick={() => {\r\n                onSubmit({ name: nameValue, color: colorValue })\r\n                setAccordionValue(\"\")\r\n              }}\r\n              className=\"h-8 w-28\"\r\n              disabled={!isModified}\r\n            >\r\n              Save\r\n            </Button>\r\n          </section>\r\n        </AccordionContent>\r\n      </AccordionItem>\r\n    </Accordion>\r\n  )\r\n}\r\n\r\nexport { getTagStyle, TagBox }\r\nexport type { TagType, TagBoxProps }\r\n",
      "type": "registry:ui"
    }
  ]
}